#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <chrono>
#include "include/ExtMonotonicStack.hpp"

using namespace std;
using namespace std::chrono;

bool runSingleTest(int testCase) {
    string inputFile = "testcases/monostack/input" + to_string(testCase) + ".txt";
    string outputFile = "testcases/monostack/output" + to_string(testCase) + ".txt";
    
    ifstream input(inputFile);
    ifstream expectedOutput(outputFile);
    
    if (!input.is_open() || !expectedOutput.is_open()) {
        cout << "ÊµãËØïÁî®‰æã " << testCase << ": Êó†Ê≥ïÊâìÂºÄÊñá‰ª∂" << endl;
        return false;
    }
    
    int n;
    input >> n;
    
    vector<int> nums(n);
    for (int i = 0; i < n; i++) {
        input >> nums[i];
    }
    
    vector<int> expected(n);
    for (int i = 0; i < n; i++) {
        expectedOutput >> expected[i];
    }
    
    input.close();
    expectedOutput.close();
    
    // ÊâßË°åÁÆóÊ≥ï
    auto startTime = high_resolution_clock::now();
    vector<int> result = ExtMonotonicStack::nextGreaterElements(nums);
    auto endTime = high_resolution_clock::now();
    
    auto duration = duration_cast<microseconds>(endTime - startTime);
    
    // È™åËØÅÁªìÊûú
    if (result.size() != expected.size()) {
        cout << "ÊµãËØïÁî®‰æã " << testCase << ": ÁªìÊûúÊï∞ÁªÑÂ§ßÂ∞è‰∏çÂåπÈÖç" << endl;
        return false;
    }
    
    for (int i = 0; i < n; i++) {
        if (result[i] != expected[i]) {
            cout << "ÊµãËØïÁî®‰æã " << testCase << ": Á¨¨ " << i << " ‰∏™‰ΩçÁΩÆÁªìÊûú‰∏çÂåπÈÖç" << endl;
            cout << "ËæìÂÖ•Êï∞ÁªÑ: [";
            for (int j = 0; j < n; j++) {
                cout << nums[j];
                if (j < n-1) cout << ", ";
            }
            cout << "]" << endl;
            cout << "ÊúüÊúõÁªìÊûú: " << expected[i] << ", ÂÆûÈôÖÁªìÊûú: " << result[i] << endl;
            return false;
        }
    }
    
    // È¢ùÂ§ñÈ™åËØÅÔºö‰∏éÊö¥ÂäõËß£Ê≥ïÊØîËæÉ
    vector<int> bruteForceResult = ExtMonotonicStack::nextGreaterElementsBruteForce(nums);
    for (int i = 0; i < n; i++) {
        if (result[i] != bruteForceResult[i]) {
            cout << "ÊµãËØïÁî®‰æã " << testCase << ": ‰∏éÊö¥ÂäõËß£Ê≥ïÁªìÊûú‰∏ç‰∏ÄËá¥" << endl;
            return false;
        }
    }
    
    cout << "ÊµãËØïÁî®‰æã " << testCase << ": ÈÄöËøá (Êï∞ÁªÑÂ§ßÂ∞è: " << n 
         << ", Áî®Êó∂: " << duration.count() << " ÂæÆÁßí)" << endl;
    
    return true;
}

void performanceTest() {
    cout << "\n=== ÊÄßËÉΩÊµãËØï ===" << endl;
    
    vector<int> sizes = {1000, 5000, 10000, 50000, 100000};
    
    for (int size : sizes) {
        vector<int> nums(size);
        for (int i = 0; i < size; i++) {
            nums[i] = rand() % 1000;
        }
        
        // ÊµãËØïÂçïË∞ÉÊ†àÁÆóÊ≥ï
        auto startTime = high_resolution_clock::now();
        vector<int> result = ExtMonotonicStack::nextGreaterElements(nums);
        auto endTime = high_resolution_clock::now();
        auto duration = duration_cast<microseconds>(endTime - startTime);
        
        cout << "Êï∞ÁªÑÂ§ßÂ∞è " << size << ": " << duration.count() << " ÂæÆÁßí" << endl;
        
        // È™åËØÅÊó∂Èó¥Â§çÊùÇÂ∫¶Á°ÆÂÆûÊòØ O(n)
        if (size <= 10000) {  // Âè™ÂØπÂ∞èÊï∞ÊçÆËøõË°åÊö¥ÂäõÈ™åËØÅ
            auto bruteForceDuration = high_resolution_clock::now();
            vector<int> bruteResult = ExtMonotonicStack::nextGreaterElementsBruteForce(nums);
            auto bruteForceEnd = high_resolution_clock::now();
            auto bruteDuration = duration_cast<microseconds>(bruteForceEnd - bruteForceDuration);
            
            cout << "  Êö¥ÂäõËß£Ê≥ïÁî®Êó∂: " << bruteDuration.count() << " ÂæÆÁßí" << endl;
            cout << "  Âä†ÈÄüÊØî: " << (double)bruteDuration.count() / duration.count() << "x" << endl;
        }
    }
}

int main() {
    cout << "=== ÂçïË∞ÉÊ†àÂà§È¢òËÑöÊú¨ÔºàÊñ∞ÊµãËØïÊï∞ÊçÆÈõÜÔºâ===" << endl;
    cout << "ÊµãËØïÂè≥‰æßÁ¨¨‰∏Ä‰∏™Êõ¥Â§ßÂÖÉÁ¥†ÁÆóÊ≥ï..." << endl << endl;
    
    int passedTests = 0;
    int totalTests = 10;
    
    for (int i = 1; i <= totalTests; i++) {
        if (runSingleTest(i)) {
            passedTests++;
        }
    }
    
    cout << endl << "=== Âü∫Êú¨ÊµãËØïÁªìÊûú ===" << endl;
    cout << "ÈÄöËøáÊµãËØï: " << passedTests << "/" << totalTests << endl;
    
    if (passedTests == totalTests) {
        cout << "üéâ ÊâÄÊúâÂü∫Êú¨ÊµãËØïÈÄöËøáÔºÅ" << endl;
        performanceTest();
    } else {
        cout << "‚ùå ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÂÆûÁé∞„ÄÇ" << endl;
    }
    
    return 0;
}