#include "Solution.h"
//节点左侧的和、节点右侧的和、跨越中间节点的和
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int sum = 0;
    int leftSum = INT_MIN;
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > leftSum) {
            leftSum = sum;
        }
    }

    sum = 0;
    int rightSum = INT_MIN;
    for (int i = mid + 1; i <= high; i++) {
        sum += A[i];
        if (sum > rightSum) {
            rightSum = sum;
        }
    }

    return leftSum + rightSum;
}


//划分数组
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (low == high) {
        return max(A[low], 0);
    }

    int mid = low + (high - low) / 2;

    int leftMax = find_maximum_subarray(A, low, mid);
    int rightMax = find_maximum_subarray(A, mid + 1, high);

    int crossMax = find_maximum_crossing_subarray(A, low, mid, high);

    return max({leftMax, rightMax, crossMax});
}