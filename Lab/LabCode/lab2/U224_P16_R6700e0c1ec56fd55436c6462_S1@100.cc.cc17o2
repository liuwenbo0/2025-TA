#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    int leftsum = -100000, sum1 = 0;
    for(int i = mid; i >= low; i--){
        sum1 += A[i];
        if(sum1 > leftsum){
            leftsum = sum1;
        }
    }
    int rightsum = -100000;
    int sum2 = 0;
    for(int i = mid+1; i<=high; i++){
        sum2 += A[i];
        if(sum2 > rightsum){
            rightsum = sum2;
        }
    }
    return (rightsum+leftsum);
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(high == low) return A[low];
    else{
        int mid = (low + high)/2;
        int leftsum, rightsum, crosssum;
        leftsum = find_maximum_subarray(A, low, mid);
        rightsum = find_maximum_subarray(A, mid+1, high);
        crosssum = find_maximum_crossing_subarray(A, low, mid, high);
        if(leftsum >= rightsum && leftsum >= crosssum) return leftsum;
        else if(rightsum >= leftsum && rightsum >= crosssum) return rightsum;
        else return crosssum;
    }
}