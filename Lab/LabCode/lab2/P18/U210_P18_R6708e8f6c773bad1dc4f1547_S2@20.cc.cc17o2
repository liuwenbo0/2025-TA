#include "Solution.h"
bool isPerfectPermutation(const vector<int>& arr) {  
    int n = arr.size();  
    for (int i = 0; i < n - 1; ++i) { 
        for (int j = i + 1; j < n; ++j) {  
            for (int k = i + 1; k < j; ++k) {  
                if (2 * arr[k] == arr[i] + arr[j]) {  
                    return false;  
                }  
            }  
        }  
    }  
    return true;  
}  
vector<int> Solution::perfect_permutation(int n) {
  //  vector<int>::size_type n = some_value;
    vector<int> ans(n);  
    for (int i = 0; i < n; ++i) {  
        ans[i] = i + 1; // 初始化为自然数排列  
    }  
    for (int i = 0; i < n; ++i) {  
        for (int j = i + 1; j < n; ++j) {  
            if (!isPerfectPermutation(ans)) {  
                swap(ans[i], ans[j]); // 尝试交换元素  
                if (isPerfectPermutation(ans)) {  
                    break; // 如果交换后满足条件，则跳出内层循环  
                } else {  
                    swap(ans[i], ans[j]); // 如果不满足条件，则交换回来  
                }  
            }  
        }  
    }  
  
    return ans;   
}