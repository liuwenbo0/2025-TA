#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    int sum=0,max_left=0;
    int left_sum=-10000;
    for(int i=mid;i>=low;i--){
        sum+=A[i];
        if(sum>left_sum){
            left_sum=sum;
            max_left=i;
        }
    }
    sum=0;
    int max_right=0,right_sum=-10000;
    for(int j=mid+1;j<=high;j++){
        sum+=A[j];
        if(sum>right_sum){
            right_sum=sum;
            max_right=j;
        }
    }
    return left_sum+right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(low==high){
        return A[low];
    }
    else{
        int mid=(low+high)/2;
        int left_sum;
        int right_sum;
        int cross_sum;
        left_sum=find_maximum_subarray(A,low,mid);
        right_sum=find_maximum_subarray(A,mid+1,high);
        cross_sum=find_maximum_crossing_subarray(A,low,mid,high);
        if(left_sum>=right_sum && left_sum>=cross_sum){
            return left_sum;
        }
        else if(right_sum>=left_sum && right_sum>=cross_sum){
            return right_sum;
        }
        else{
            return cross_sum;
        }
    }
}