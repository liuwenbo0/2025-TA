#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    long long m;
    int k, s;
    cin >> m >> k >> s;

    queue<long long> q;
    vector<int> counts; 
    if (m > 0) {
        q.push(m);
    }

    while (!q.empty()) {
        long long current = q.front();
        q.pop();

        if (current > 1) {
            long long x1 = current / 2; 
            long long x2 = current % 2;  
            long long x3 = current / 2;  

            q.push(x1);
            q.push(x2);
            q.push(x3);
        } else {
            
            int level = counts.size(); 

            if (level == 0 || static_cast<size_t>(level) >= counts.size()) {
                counts.push_back(0); 
            }

            if (current == 1) {
                counts[level]++;
            }
        }
    }

    int totalOnes = 0;
    for (size_t i = k - 1; i < static_cast<size_t>(s) && i < counts.size(); ++i) { // Convert k,s to 0-based index
        totalOnes += counts[i];
    }

    cout << totalOnes << endl;

    return 0; 
}