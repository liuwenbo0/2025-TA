#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int leftsum=-0xffff;
    int i,sum1=0;
    for(i=mid;i>=low;i--){
        sum1+=A[i];
        if(sum1>leftsum){
            leftsum=sum1;
        }
    }
    int rightsum=-0xffff;
    int j,sum2=0;
    for(j=mid+1;j<=high;j++){
        sum2+=A[j];
        if(sum2>=rightsum){
            rightsum=sum2;
        }
    }
    int max=leftsum+rightsum;
    return max;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(high==low){
        return A[low];
    }
    else{
        int mid=(low+high)/2;
        int left,right,cross;
        left=find_maximum_subarray(A,low,mid);
        right=find_maximum_subarray(A, mid+1,high);
        cross=find_maximum_crossing_subarray(A,low,mid,high);
        if(left>right&&left>cross){
            return left;
        }
        else if(right>left&&right>cross){
            return right;
        }
        else return cross;
    }
}