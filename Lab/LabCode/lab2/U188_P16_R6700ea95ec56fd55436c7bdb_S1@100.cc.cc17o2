#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int l_sum=-10001;
    int r_sum=-10001;
    int sum=0;
    for(int i=mid;i>=low;i--){
        sum+=A[i];
        if(l_sum<sum){
            l_sum=sum;
        }
    }
    sum=0;
    for(int j=mid+1;j<=high;j++){
        sum+=A[j];
        if(sum>r_sum){
            r_sum=sum;
        }
    }
    return (l_sum+r_sum);
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(low==high) return A[low];
    else{
        int mid=(low+high)/2;
        int sum=0;
        int l_sum=find_maximum_subarray(A,low,mid);
        int r_sum=find_maximum_subarray(A,mid+1,high);
        int c_sum=find_maximum_crossing_subarray(A,low,mid,high);
        if(l_sum>=r_sum && l_sum>=c_sum) sum=l_sum;
        else if(r_sum>=l_sum && r_sum>=c_sum) sum=r_sum;
        else sum=c_sum;
        return sum; 
    }
}