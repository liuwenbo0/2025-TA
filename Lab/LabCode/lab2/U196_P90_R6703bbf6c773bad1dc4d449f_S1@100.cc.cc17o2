#include<iostream>
#include<vector>
using namespace std;
int resourceSum(vector<int>&tree,int p){
    int size=tree.size();
    if(p>=size||tree[p]==-1){
        return 0;
    }
    int sum=max(resourceSum(tree,p*2+1),resourceSum(tree,p*2+2))+tree[p];
    return sum;
}
int main(){
    vector<int> tree;
    int LeaF,node,height=0;
    long long nodeSum=0;
    while(cin>>LeaF){
        tree.push_back(LeaF);
    }
    if(tree[0]==-1){
        cout<<0<<endl<<0<<endl<<0;
        return 0;
    }
    node=tree.size();
    LeaF=0;
    if(node){
        LeaF=1;
        while(LeaF<=node){
            LeaF*=2;
            height++;
        }
    }
    bool leftchild=false,rightchild=false;
    for(int i=0;i<node;i++){
        if(i*2+1<node && tree[i*2+1]!=-1){
            leftchild=true;
        }       
        if(i*2+2<node && tree[i*2+2]!=-1){
            rightchild=true;
        }
        if(leftchild || rightchild){
            if(leftchild && rightchild && tree[i]>tree[i*2+1] && tree[i]>tree[i*2+2]){
                nodeSum+=tree[i];
            }
            else if(leftchild && tree[i]>tree[i*2+1] && !rightchild){
                nodeSum+=tree[i];
            }
            else if(rightchild && tree[i]>tree[i*2+2] && !leftchild){
                nodeSum+=tree[i];
            }
        }
        leftchild=false;
        rightchild=false;
    }
    cout<<height<<endl;
    cout<<resourceSum(tree,0)<<endl;
    cout<<nodeSum<<endl;
    return 0;
}