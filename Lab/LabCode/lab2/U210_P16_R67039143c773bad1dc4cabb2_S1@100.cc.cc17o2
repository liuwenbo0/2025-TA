#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int leftsum=INT_MIN;
   // int leftmin=mid;
    int sum=0;
    for(int i=mid;i>=low;i--){
        sum+=A[i];
        if(sum>=leftsum){
            leftsum=sum;
        }
    }
    int rightsum=INT_MIN;
    //int rightmax=mid+1;
        sum=0;
    for(int i=mid+1;i<=high;i++){
        sum+=A[i];
        if(sum>=rightsum){
            rightsum=sum;
            //rightmax=i;
        }
    }
    return rightsum+leftsum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int mid=0;
    if(low==high){
        return A[low];
    }
    
    else{
        mid=low+(high-low)/2;
        int leftsum_max= find_maximum_subarray(A,low,mid);
        int rightsum_max= find_maximum_subarray(A,mid+1,high);
        int midsum_max= find_maximum_crossing_subarray(A,low,mid,high);
    
        return max(max(leftsum_max,rightsum_max),midsum_max);
    }
}