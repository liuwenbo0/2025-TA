#include "Solution.h"

vector<vector<int>> my_round_robin_schedule(int n, int startVal)
{
	vector<vector<int> > ans;
	for (int i = 0; i < n; i++) 
		ans.push_back(vector<int>(n, 0));
	if (n == 1)
	{
		ans[0][0] = startVal;
		return ans;
	}
	auto arrTL = my_round_robin_schedule(n / 2, startVal);
	auto arrTR = my_round_robin_schedule(n / 2, startVal + n / 2);
	for (int row = 0; row < n / 2; row++)
	{
		for (int col = 0; col < n / 2; col++)
		{
			ans[row][col] = arrTL[row][col];
			ans[row][col + n / 2] = arrTR[row][col];
			ans[row + n / 2][col] = arrTR[row][col];
			ans[row + n / 2][col + n / 2] = arrTL[row][col];
		}
	}
	return ans;
}

vector<vector<int>> Solution::round_robin_schedule(int n)
{
	return my_round_robin_schedule(n, 1);
}