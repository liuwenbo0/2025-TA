#include "Solution.h"
#include <vector>
using namespace std;

void generateSchedule(vector<vector<int>>& ans, int teams, int startIndex) {
    if (teams == 2) {
        ans[startIndex][startIndex] = startIndex + 1;
        ans[startIndex][startIndex + 1] = startIndex + 2;
        ans[startIndex + 1][startIndex] = startIndex + 2;
        ans[startIndex + 1][startIndex + 1] = startIndex + 1;
        return;
    }

    int half = teams / 2;
    generateSchedule(ans, half, startIndex);
    generateSchedule(ans, half, startIndex + half);

    for (int i = 0; i < half; ++i) {
        for (int j = 0; j < half; ++j) {
            ans[startIndex + i][startIndex + half + j] = ans[startIndex + i][startIndex + j] + half;
            ans[startIndex + half + i][startIndex + j] = ans[startIndex + i][startIndex + j] + half;
            ans[startIndex + half + i][startIndex + half + j] = ans[startIndex + i][startIndex + j];
        }
    }
}

vector<vector<int>> Solution::round_robin_schedule(int n) {
    vector<vector<int>> ans(n, vector<int>(n, 0));
    for (int team = 0; team < n; team++) {
        ans[team][0] = team + 1;
    }
    generateSchedule(ans, n, 0);
    return ans;
}