#include "Solution.h"  
#include <vector>  
using namespace std;  
  
void constructSchedule(vector<vector<int>>& scheduleMatrix, int totalTeams, int currentIndex) {  
    if (totalTeams == 2) {  
        scheduleMatrix[currentIndex][currentIndex] = currentIndex + 1;  
        scheduleMatrix[currentIndex][currentIndex + 1] = currentIndex + 2;  
        scheduleMatrix[currentIndex + 1][currentIndex] = currentIndex + 2;  
        scheduleMatrix[currentIndex + 1][currentIndex + 1] = currentIndex + 1;  
        return;  
    }  
    int halfTeams = totalTeams / 2;  
      
    // 使用while循环代替第一个for循环（递归调用）  
    int i = 0;  
    while (i < 2) {  
        if (i == 0) {  
            constructSchedule(scheduleMatrix, halfTeams, currentIndex);  
        } else {  
            constructSchedule(scheduleMatrix, halfTeams, currentIndex + halfTeams);  
        }  
        i++;  
    }  
  
    // 使用while循环代替第二个嵌套的for循环  
    int row = 0, col = 0;  
    while (row < halfTeams) {  
        while (col < halfTeams) {  
            scheduleMatrix[currentIndex + row][currentIndex + halfTeams + col] = scheduleMatrix[currentIndex + row][currentIndex + col] + halfTeams;  
            scheduleMatrix[currentIndex + halfTeams + row][currentIndex + col] = scheduleMatrix[currentIndex + row][currentIndex + col] + halfTeams;  
            scheduleMatrix[currentIndex + halfTeams + row][currentIndex + halfTeams + col] = scheduleMatrix[currentIndex + row][currentIndex + col];  
            col++;  
        }  
        col = 0; // 重置列计数器  
        row++;  
    }  
}  
  
vector<vector<int>> Solution::round_robin_schedule(int n) {  
    vector<vector<int>> resultMatrix(n, vector<int>(n, 0));  
    int i = 0;  
    while (i < n) {  
        resultMatrix[i][0] = i + 1;  
        i++;  
    }  
    constructSchedule(resultMatrix, n, 0);  
    return resultMatrix;  
}