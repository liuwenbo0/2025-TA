#include<iostream>
#include<vector>
#include<math.h>
using namespace std;
int count_heigt(vector<int> A)
{
	int p = 1;
	int num = 0;
	while (p <= int(A.size()))
	{
		p *= 2;
		num++;
	}
	return num;
}
int find_max(vector<int>A, int begin)
{
	while (begin > 0)
	{
		for (int i = begin; i < begin * 2 + 1; i += 2)
		{
			if (A[i] < A[i + 1])
			{
				A[i / 2] += A[i + 1];
			}
			else if (A[i] > A[i + 1])
			{
				A[i / 2] += A[i];
			}
			else
			{
				continue;
			}
		}
		begin /= 2;
	}
	return A[0];
}
int odd_sort(vector<int>A, int begin, int n)
{
	int odd = 0;
	while (begin < n / 2)
	{
		for (int i = begin; i < 2 * begin + 1; i++)
		{
			if (!((A[2 * i + 1] == -1) && (A[2 * i + 2] == -1)) && (A[2 * i + 1] < A[i]) && (A[2 * i + 2] < A[i]))
			{
				odd += A[i];
			}
		}
		begin = 2 * begin + 1;
	}
	return odd;
}
vector<int> fixed_tree(vector<int>A, int n)
{
	int len = int(A.size());
	int total = pow(2, n);
	vector<int>fixed_t(total - 1, 0);
	for (int i = 0; i<int(A.size()); i++)
	{
		fixed_t[i] = A[i];
	}
	for (int i = int(A.size()); i < total - 1; i++)
	{
		fixed_t[i] = -1;
	}

	return fixed_t;
}
int main()
{
	vector<int>orintree;
	int p;
	char c;
	int n = 0;
	while (cin >> p)
	{

		orintree.push_back(p);
		char ch = getchar();
		if (ch == '\n')
		{
			break;
		}
	}


	int num = count_heigt(orintree);
	vector<int>tree = fixed_tree(orintree, num);
	int max = find_max(tree, int(tree.size()) / 2);
	int odd = odd_sort(tree, 0, int(tree.size()));
	//for (int i = 0; i<int(tree.size()); i++)
	//{
		//cout << tree[i] << " ";
	//}
	//cout << "" << endl;
	cout << num << endl;
	cout << max << endl;
	cout << odd << endl;


}