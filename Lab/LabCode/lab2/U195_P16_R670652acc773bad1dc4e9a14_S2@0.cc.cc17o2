#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) 
{
      // 请在这里完成你的代码
    int k=0;
    int minsum=0;
    int maxsum=0;

    for(int i=mid;i>=low;--i)
    {
      k+=A[i];
      if(k>minsum)   
        {minsum=k;}
       
    }

    
    for(int j=mid+1;j<=high;++j)
    {
      
      k+=A[j];
      if(k>maxsum)
        {maxsum=k;}
        
    }
    
    int sum;
    sum=minsum+maxsum;

    return sum;
    
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) 
{
    // 请在这里完成你的代码
    if(high==low)
    {
      return A[high];
    }
    
    int mid=(low+high)/2;
    int min=find_maximum_subarray(A, low, mid);
    int max=find_maximum_subarray(A, mid+1, high);
    int sum=find_maximum_crossing_subarray(A,low,mid,high);

    int d=(min>max)?min:max;
    int want=(sum>d)?sum:d;
    return want;
}