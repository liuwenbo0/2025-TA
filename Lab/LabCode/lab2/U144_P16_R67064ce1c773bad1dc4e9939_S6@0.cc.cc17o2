#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
int s = 0;  
    int left_s = 0;     
    for (int i = mid; i >= low; i--) {  
        s += A[i];  
        if (s > left_s) {  
            left_s = s;  
        }  
    }
    s = 0;  
    int right_s = 0;  
    for (int j = mid + 1; j <= high; j++) {  
        s += A[j];  
        if (s > right_s) {  
            right_s = s;    
        }  
    }   
    return left_s + right_s;

    return 0;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(high==1)
    return A[high];
    else{
        int mid=(low+high)/2;
        int left_s = find_maximum_subarray(A, low, mid);  
        int right_s = find_maximum_subarray(A, mid + 1, high);  
        int cross_s = find_maximum_crossing_subarray(A, low, mid, high); 
        return max(left_s,max(right_s,cross_s));
    }

    
    return 0;
}