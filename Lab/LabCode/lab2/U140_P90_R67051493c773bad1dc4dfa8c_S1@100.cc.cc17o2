#include<iostream>
#include<vector>
#include<cmath>
using namespace std;
int SUM2(vector<int>& ans,int n){
    int maxsum=0;
    int begin=0;
    for(int i=0;i<n;i++){
        if(log(i+1)/log(2)==log(n)/log(2)){
            begin=i;
            break;
        }
    }
    for(int i1=begin;i1<n;i1++){
        if(ans[i1]==-1){
            ans[i1]=0;
        }
        int sum0=ans[i1];
        int j1=(i1-1)/2;
        int a=0;
        while(j1>=0){
            if(j1==0){
                a++;
            }
            if(a==2){
                break;
            }
            sum0+=ans[j1];
            j1=(j1-1)/2;
        }
        if(sum0>maxsum){
            maxsum=sum0;
        }
    }
    for(int i2=(n-2)/2+1;i2<begin;i2++){
        if(ans[i2]==-1){
            ans[i2]=0;
        }
        int sum0=ans[i2];
        int j2=(i2-1)/2;
        int b=0;
        while(j2>=0){
            if(j2==0){
                b++;
            }
            if(b==2){
                break;
            }
            sum0+=ans[j2];
            j2=(j2-1)/2; 
        }
        if(sum0>maxsum){
            maxsum=sum0;
        }
    }
    return maxsum;
}
int main(){
    vector<int> tree;
    int num;
    while(cin>>num){
        tree.push_back(num);
    }
    int allnum=tree.size();
    int high=log(allnum)/log(2)+1;
    int sum3=0;
    for(int i=0;i<allnum;i++){
        if(((2*i+2)<=allnum)){
            if((tree[i]>tree[2*i+1])&&(tree[i]>tree[2*i+2])){
                if(!(tree[2*i+1]==-1&&tree[2*i+2]==-1)){
                    sum3+=tree[i];
                }
            }
        }
    }
    int sum2=SUM2(tree,allnum);
    cout<<high<<endl<<sum2<<endl<<sum3<<endl;
}
//((log(i+1)/log(2)+1)<high)&&