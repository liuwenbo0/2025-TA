#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int lsum=A[mid],sum=0,mleft=mid,rsum=A[mid+1],mright=mid+1;
    for(int i=mid;i>=low;i--){
        sum=sum+A[i];
        if(sum>lsum){
            lsum=sum;
            mleft=i;
        }
    }
    sum=0;
    for(int j=mid+1;j<=high;j++){
        sum=sum+A[j];
        if(sum>rsum){
            rsum=sum;
            mright=j;
        }
    }
    return (mleft,mright,lsum+rsum);

    return 0;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int mid=(low+high)/2,llow,lhigh,lsum,rlow,rhigh,rsum,clow,chigh,csum;
    if(high==low){
        return (low,high,A[low]);
    }
    else{
        (llow,lhigh,lsum)=find_maximum_subarray(A,low,mid);
        (rlow,rhigh,rsum)=find_maximum_subarray(A,mid+1,high);
        (clow,chigh,csum)=find_maximum_crossing_subarray(A,low,mid,high);
    }
    if(lsum>=rsum&&lsum>=csum){
        return (llow,lhigh,lsum);
    }
    else if(rsum>=lsum&&rsum>=csum){
        return (rlow,rhigh,rsum);
    }
    else return (clow,chigh,csum);
    
    return 0;
}