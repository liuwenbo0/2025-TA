#include "Solution.h"
#include <vector>
#include <algorithm> 
#include <climits>
using namespace std;
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
   long maxleftbordersum=0,leftbordersum=0,maxrightbordersum=0,rightbordersum=0;
   for(int i=mid;i>=low;i--)
   {
    leftbordersum+=A[i];
    if(leftbordersum>maxleftbordersum)
    {
        maxleftbordersum=leftbordersum;
    }
   }
   for(int j=mid+1;j<=high;j++)
   {
    rightbordersum+=A[j];
    if(maxrightbordersum<rightbordersum)
    {
        maxrightbordersum=rightbordersum;
    }
   }
    return maxleftbordersum+maxrightbordersum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(high==low)
    {
        return A[low];
    }
    int mid =(low+high)/2;
    int maxleftsum=Solution::find_maximum_subarray(A,low,mid);
    int maxrightsum=Solution::find_maximum_subarray(A,mid+1,high);
    int maxcrossingsum=Solution::find_maximum_crossing_subarray(A,low,mid,high);
    return max(max(maxleftsum,maxrightsum),maxcrossingsum);
}