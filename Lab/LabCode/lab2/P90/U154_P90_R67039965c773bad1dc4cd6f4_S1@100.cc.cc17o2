#include <iostream>
using namespace std;


int leftChild(int idx) {
    return 2 * idx + 1;
}

int rightChild(int idx) {
    return 2 * idx + 2;
}

int calculateHeight(int tree[], int root, int nodeCount) {
    if (root >= nodeCount || tree[root] == -1) return 0;
    
    int leftHeight = calculateHeight(tree, leftChild(root), nodeCount);
    int rightHeight = calculateHeight(tree, rightChild(root), nodeCount);

    return max(leftHeight, rightHeight) + 1;
}

int maxPathSum(int tree[], int root, int nodeCount) {
    if (root >= nodeCount || tree[root] == -1) return 0;

    int leftSum = maxPathSum(tree, leftChild(root), nodeCount);
    int rightSum = maxPathSum(tree, rightChild(root), nodeCount);

    return max(leftSum, rightSum) + tree[root];
}

int customFunction(int tree[], int root, int nodeCount) {
    if (root >= nodeCount || tree[root] == -1) return 0;

    bool leftExists = leftChild(root) < nodeCount && tree[leftChild(root)] != -1;
    bool rightExists = rightChild(root) < nodeCount && tree[rightChild(root)] != -1;

    if (!leftExists && !rightExists) return 0;

    if (tree[root] > (leftExists ? tree[leftChild(root)] : -1) && tree[root] > (rightExists ? tree[rightChild(root)] : -1)) {
        return tree[root] + customFunction(tree, leftChild(root), nodeCount) + customFunction(tree, rightChild(root), nodeCount);
    }

    return customFunction(tree, leftChild(root), nodeCount) + customFunction(tree, rightChild(root), nodeCount);
}

int main() {
    int num, i = 0;
    int tree[10000000];  

    while (cin >> num) {
        tree[i++] = num;
    }

    cout << calculateHeight(tree, 0, i) << endl;
    cout << maxPathSum(tree, 0, i) << endl;
    cout << customFunction(tree, 0, i) << endl;

    return 0;
}