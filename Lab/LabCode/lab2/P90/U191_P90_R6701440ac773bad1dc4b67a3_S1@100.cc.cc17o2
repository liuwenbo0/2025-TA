#include<iostream>
#include<vector>
using namespace std;
int max(int a, int b) {
    return a > b ? a : b;
}
int resource(vector<int> &t, int p) {
    int n = t.size();
    if(p >= n || t[p] == -1)return 0;
    int ret = max(resource(t, 2 * p + 1), resource(t, 2 * p + 2)) + t[p];
    return ret;
}
int main(void) {//对于每一个节点，在数组中下标为n则访问其左子节点的下标是2*n+1，右子节点下标是2*n+2
    vector<int> t;
    int leaf, total, high = 0;
    long long special = 0;
    while(cin >> leaf) t.push_back(leaf);
    if(t[0] == -1) {
        cout << 0 << endl << 0 << endl << 0;
        return 0;
    }
    total = t.size();
    leaf = 0;
    if(total) {
        leaf = 1;
        while(leaf <= total) {
            leaf *= 2;
            high++;
        }
    }
    bool left = false, right = false;
    for (int i = 0; i < total; ++i) {
        if(i * 2 + 1 < total && t[i * 2 + 1] != -1) left = true;
        if(i * 2 + 2 < total && t[i * 2 + 2] != -1) right = true;
        if(left || right) {
            if(left && right && t[i] > t[i * 2 + 1] && t[i] > t[i * 2 + 2]) special += t[i]; 
            else if(left && t[i] > t[i * 2 + 1] && !right) special += t[i]; 
            else if(right && t[i] > t[i * 2 + 2] && !left) special += t[i]; 
        }
        left = false, right = false;
    }
    cout << high << endl;
    cout << resource(t, 0) << endl;
    cout << special << endl;
    return 0;
}