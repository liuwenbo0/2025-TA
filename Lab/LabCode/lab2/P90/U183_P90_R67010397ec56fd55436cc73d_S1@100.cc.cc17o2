#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

struct Node {
    int val;
    Node *left;
    Node *right;
    Node(int x) : val(x), left(NULL), right(NULL) {}
};

Node* build(const vector<int>& nodes, int index) {
    if (index >= nodes.size() || nodes[index] == -1) return NULL;
    Node* root = new Node(nodes[index]);
    root->left = build(nodes, 2 * index + 1);
    root->right = build(nodes, 2 * index + 2);
    return root;
}

int treeHeight(Node* root) {
    if (!root) return 0;
    return max(treeHeight(root->left), treeHeight(root->right)) + 1;
}

int maxPathSum(Node* root, int& maxSum) {
    if (!root) return 0;
    if (!root->left && !root->right) return root->val;
    int left = maxPathSum(root->left, maxSum);
    int right = maxPathSum(root->right, maxSum);
    int sum=max(left,right);
    maxSum = max(maxSum, sum+ root->val);
    return max(left, right) + root->val;
}


void specialArea(Node* root, int& sum) {
    if (!root) return; 
    if (!root->left && !root->right) return;
    bool flag = true;
    if (root->left) {
        specialArea(root->left, sum);
        if (root->val <= root->left->val) {
            flag = false;
        }
    }
    if (root->right) {
        specialArea(root->right, sum);
        if (root->val <= root->right->val) {
            flag = false;
        }
    }
    if (flag) {
        sum += root->val;
    }
}

int main() {
    vector<int> nodes;
    int temp;
    while(cin>>temp){
        nodes.push_back(temp);
    }
    Node* root = build(nodes, 0);

    int h = treeHeight(root);
    int maxSum = INT_MIN;
    maxPathSum(root, maxSum);
    int sum=0;
    specialArea(root,sum);

    cout << h << endl;
    cout << maxSum << endl;
    cout << sum << endl;

    return 0;
}