#include <iostream>
#include <vector>
#include <algorithm>

class Tree {
public:
    std::vector<int> tree;
    int height;
    long long Sp_Leaf;

    Tree() : height(0), Sp_Leaf(0) {}

    void Build() {
        int current;
        while (std::cin >> current) {
            tree.push_back(current);
        }
    }

    void Solve() {
        if (tree.empty() || tree[0] == -1) {
            std::cout << 0 << std::endl << 0 << std::endl << 0;
            return;
        }

        Height();
        Spcial_Leaf();
    }

    int Max_Path(int index) {
        if (index >= tree.size() || tree[index] == -1) return 0;
        int total = std::max(Max_Path(2 * index + 1), Max_Path(2 * index + 2)) + tree[index];
        return total;
    }

    void Height() {
        int current = 1;
        while (current <= tree.size()) {
            current *= 2;
            height++;
        }
    }

    void Spcial_Leaf() {
        bool left = false, right = false;
        for (int i = 0; i < tree.size(); ++i) {
            if (i * 2 + 1 < tree.size() && tree[i * 2 + 1] != -1) left = true;
            if (i * 2 + 2 < tree.size() && tree[i * 2 + 2] != -1) right = true;

            if (left || right) {
                if (left && right && tree[i] > tree[i * 2 + 1] && tree[i] > tree[i * 2 + 2]) {
                    Sp_Leaf += tree[i];
                } else if (left && tree[i] > tree[i * 2 + 1] && !right) {
                    Sp_Leaf += tree[i];
                } else if (right && tree[i] > tree[i * 2 + 2] && !left) {
                    Sp_Leaf += tree[i];
                }
            }
            left = false;
            right = false;
        }
    }
};

int main() {
    Tree tree;
    tree.Build();
    tree.Solve();
    std::cout << tree.height << std::endl;
    std::cout << tree.Max_Path(0) << std::endl;
    std::cout << tree.Sp_Leaf << std::endl;
    return 0;
}