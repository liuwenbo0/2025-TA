#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int leftsum=-10001;
    int rightsum=-10001;
    int sum=0;
    for(int i=mid;i>=low;i--)
    {
        sum+=A[i];
        if(sum>leftsum)
        {
            leftsum=sum;
        }
    }
    sum=0;
    for(int j=mid+1;j<=high;j++)
    {
        sum+=A[j];
        if(sum>rightsum)
        rightsum=sum;
    }
    sum=leftsum+rightsum;
    return sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int mid;
    if (high==low)
    return A[low];
    else mid=low+(high-low)/2;
    int leftsum=find_maximum_subarray(A,low,mid);
    int rightsum=find_maximum_subarray(A,mid+1,high);
    int crosssum=find_maximum_crossing_subarray(A,low,mid,high);
    if(leftsum>rightsum && leftsum>crosssum)
    return leftsum;
    else if(rightsum>leftsum && rightsum>crosssum)
    return rightsum;
    else return crosssum;
}