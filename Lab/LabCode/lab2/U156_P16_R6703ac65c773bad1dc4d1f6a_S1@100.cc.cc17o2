#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <utility>
#include "Solution.h"
using namespace std;

int Solution::find_maximum_crossing_subarray(vector<int>& A, int low, int mid, int high) {
    int left_sum = INT_MIN;
    int right_sum = INT_MIN;
    int sum = 0;
    
    for (int i = mid; i >= low; --i) {
        sum += A[i];
        left_sum = max(sum, left_sum);
    }
    
    sum = 0;
    for (int i = mid + 1; i <= high; ++i) {
        sum += A[i];
        right_sum = max(sum, right_sum);
    }
    return left_sum + right_sum;
}

int Solution::find_maximum_subarray(vector<int>& A, int low, int high) {
    if (low == high){
        return A[low];
    }
    int mid = (low + high) / 2;
    return max({find_maximum_subarray(A, low, mid),find_maximum_subarray(A, mid + 1, high), find_maximum_crossing_subarray(A, low, mid, high)});
}