#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
	mid=(low+high)/2;
	int sumL=0,ansL=A[mid];
	int sumR=0,ansR=A[mid+1];
	for(int i=mid;i>=low;i--){
		sumL+=A[i];
		ansL=max(ansL,sumL);
	}
	for(int i=mid+1;i<=high;i++){
	sumR+=A[i];
	ansR=max(ansR,sumR);
	}
	
    return ansL+ansR;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
	if(low==high) return A[low];
	else{
		int mid=(low+high)/2;
		int L=Solution::find_maximum_subarray(A,low,mid);
		int R=Solution::find_maximum_subarray(A,mid+1,high);
		int LR=Solution::find_maximum_crossing_subarray(A,low,mid,high);
		return max(max(L,R),LR);
	}

}