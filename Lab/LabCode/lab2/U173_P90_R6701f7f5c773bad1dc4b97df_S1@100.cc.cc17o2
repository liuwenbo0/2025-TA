#include <iostream>
#include <vector>
using namespace std;
int High(int tree[],int root,int n){
    int lefthigh,righthigh;
    if(tree[root]==-1||root>=n) return 0;
    else{
        lefthigh=High(tree,root*2+1,n);
        righthigh=High(tree,root*2+2,n);
        if(lefthigh>=righthigh) return lefthigh+1;
        else return righthigh+1;
    }}
int maxpath(int tree[],int root,int n){
    int left=0,right=0;
    if(tree[root]==-1||root>=n) return 0;
    else{
        left+=maxpath(tree,root*2+1,n);
        right+=maxpath(tree,root*2+2,n);
        if(right>=left) return right+=tree[root];
        else return left+=tree[root];
    }}
int find(int tree[],int root,int n){
    if(tree[root]==-1||root>=n) return 0;
else if(tree[root*2+1]==-1&&tree[root*2+2]==-1) 
return 0;
else if((root*2+1)>=n&&(root*2+2)>=n) 
return 0;
else if(tree[root]>tree[root*2+1]&&tree[root]>tree[root*2+2]) 
return tree[root]+find(tree,root*2+1,n)+find(tree,root*2+2,n);
    else return find(tree,root*2+1,n)+find(tree,root*2+2,n);}
int main(){
    int num,i=0;
    int tree[10000000];
   
    while(cin>>num){
        tree[i++]=num;
    }
    cout << High(tree,0,i) << endl;
    cout << maxpath(tree,0,i) << endl;
    cout << find(tree,0,i);
    return 0;
    }