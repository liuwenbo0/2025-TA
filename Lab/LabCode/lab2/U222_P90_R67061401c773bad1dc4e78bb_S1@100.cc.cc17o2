#include<iostream>
#include<vector>
#include<cmath>
using namespace std;
int heigt(vector<int> nums)
{
    int power = 1;
    int count=0;
    while (power<=nums.size())
    {
        power*=2;
        count++;
    }
    return count;
}
int find_max(vector<int>nums, int start)
{
    while (start > 0)
    {
        for (int i = start; i < start * 2 + 1; i =i+2)
        {
            if (nums[i] < nums[i + 1])
            {
                nums[i / 2] =nums[i/2]+ nums[i + 1];
            }
            else if(nums[i] > nums[i+1] )
            {
                nums[i / 2] =+nums[i/2]+ nums[i];
            }
            else
            {
                continue;
            }
        }
        start /= 2;
    }
    return nums[0];
}
int odd_sort(vector<int>nums, int start, int n)
{
    int odd = 0;
    while (start < n / 2)
    {
        for (int i = start; i < 2 * start + 1; i++)
        {
            if (!((nums[2 * i + 1] == -1) && (nums[2 * i + 2] == -1)) && (nums[2 * i + 1] < nums[i]) && (nums[2 * i + 2] < nums[i]))
            {
                odd =odd+ nums[i];
            }
        }
        start = 2 * start + 1;
    }
    return odd;
}
vector<int> fixed_tree(vector<int>nums, int n)
{
    int total = pow(2, n);
    vector<int>fixed_t(total - 1, 0);
    for (int i = 0; i<nums.size(); i++)
    {
        fixed_t[i] = nums[i];
    }
    for (int i = nums.size(); i < total - 1; i++)
    {
        fixed_t[i] = -1;
    }
    
    return fixed_t;
}
int main()
{
    vector<int>rootVec;
    int value;
    while (cin >> value)
    {

        rootVec.push_back(value);
        char ch = getchar();
        if (ch == '\n')
        {
            break;
        }
    }
    int num = heigt(rootVec);
    vector<int>treeVec = fixed_tree(rootVec, num);
    int max = find_max(treeVec, treeVec.size() / 2);
    int odd = odd_sort(treeVec, 0, treeVec.size());
    cout << num << endl;
    cout << max << endl;
    cout << odd << endl;


}