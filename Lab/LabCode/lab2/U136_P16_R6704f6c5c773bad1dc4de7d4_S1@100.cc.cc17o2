#include "Solution.h"
#include <vector>
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int leftMaxSum = INT_MIN;
    int tempSum = 0;
    int index = mid;
    while (index >= low) {
        tempSum += A[index];
        if (tempSum > leftMaxSum) {
            leftMaxSum = tempSum;
        }
        index--;
    }

    int rightMaxSum = INT_MIN;
    tempSum = 0;
    index = mid + 1;
    while (index <= high) {
        tempSum += A[index];
        if (tempSum > rightMaxSum) {
            rightMaxSum = tempSum;
        }
        index++;
    }

    return leftMaxSum + rightMaxSum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (high == low) {
        return A[low];
    }

    int mid = (low + high) / 2;
    int leftMax = find_maximum_subarray(A, low, mid);
    int rightMax = find_maximum_subarray(A, mid + 1, high);
    int crossMax = find_maximum_crossing_subarray(A, low, mid, high);

    return max(max(leftMax, rightMax), crossMax);
}