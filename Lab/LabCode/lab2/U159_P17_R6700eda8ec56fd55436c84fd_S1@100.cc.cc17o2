#include "Solution.h"
void generate_schedule(vector<vector<int>> &ans, int size, int point) 
  {
    if(size == 2)
    {
        ans[point][point] = 1;
        ans[point][point + 1] = 2;
        ans[point + 1][point] = 2;
        ans[point + 1][point + 1] = 1;
        return;
    }
    int half = size / 2;

    generate_schedule(ans, half, point);  //左上
    generate_schedule(ans, half, point + half); //右下

    for(int i = 0;i < half;i++)
    {
        for(int j = 0;j < half;j++)
        {
          ans[point+half+i][point+j] = ans[point+i][point+j] + half;  //左下
          ans[point+i][point+half+j] = ans[point+i][point+j] + half;  //右上
        }
    }
  }
vector<vector<int>> Solution::round_robin_schedule(int n) {
    // 如此构造一个二维数组（ nxn 矩阵）
    vector<vector<int> > ans;
    for(int i=0; i<n; i++) {
      ans.push_back(vector<int>(n, 0));
    }
    generate_schedule(ans, n, 0);
    return ans;
  }