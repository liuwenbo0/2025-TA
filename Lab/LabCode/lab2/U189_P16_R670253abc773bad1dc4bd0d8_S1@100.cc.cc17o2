#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum=INT_MIN;
    int right_sum=INT_MIN;
    int total=0;
    for(int i=mid;i>=low;i--)
    {
        total+=A[i];
        if(total>left_sum)
        {
            left_sum=total;
        }
    }
    total=0;
    for(int i=mid+1;i<=high;i++)
    {
        total+=A[i];
        if(total>right_sum)
        {
            right_sum=total;
        }
    }
    return left_sum+right_sum;


}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(low==high)
    return A[low];

    int mid=(low+high)>>1;
    int left_max=find_maximum_subarray(A,low,mid);
    int right_max=find_maximum_subarray(A,mid+1,high);
    int cross_max=find_maximum_crossing_subarray(A,low,mid,high);
    return (left_max > right_max ? 
            (left_max > cross_max ? left_max : cross_max) : 
            (right_max > cross_max ? right_max : cross_max));


}