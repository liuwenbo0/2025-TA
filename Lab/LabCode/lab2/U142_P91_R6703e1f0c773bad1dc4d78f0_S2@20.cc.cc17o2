#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    long long m;
    int k, s;
    cin >> m >> k >> s;

    queue<pair<long long, int>> q; 
    vector<int> counts(100, 0); 

    if (m > 0) {
        q.push({m, 0});
    }

    while (!q.empty()) {
        long long current = q.front().first;
        int level = q.front().second;
        q.pop();

        if (current > 1) {
            long long x1 = current / 2;
            long long x2 = current % 2;
            long long x3 = current - (current / 2) * 2; // current - 2 * (current / 2)

            q.push({x1, level + 1});
            if (x2 != 0) {
                q.push({x2, level + 1});
            }
            q.push({x3, level + 1});
        } else {
            counts[level]++;
        }
    }

    int totalOnes = 0;
    for (int i = k - 1; i < s && i < static_cast<int>(counts.size()); ++i) { // Convert k,s to 0-based index
        totalOnes += counts[i];
    }

    cout << totalOnes << endl;

    return 0;
}