#include "Solution.h"
vector<vector<int>> Solution::round_robin_schedule(int n) { 
    if (n == 2) {
      return {
        {1, 2},
        {2, 1}
      };
    }
    // 递归步骤：将问题分解为四个子问题
        int n_half = n / 2;
        vector<vector<int>> sub_schedule = round_robin_schedule(n_half);

        // 创建一个 n × n 的二维数组
        vector<vector<int> > ans;
        for(int i=0; i<n; i++) {
      ans.push_back(vector<int>(n, 0));
    }

        // 填充左上和右下子数组
        for (int i = 0; i < n_half; ++i) {
            for (int j = 0; j < n_half; ++j) {
                ans[i][j] = sub_schedule[i][j];
                ans[i + n_half][j + n_half] = sub_schedule[i][j];
            }
        }

        // 填充右上和左下子数组
        for (int i = 0; i < n_half; ++i) {
            for (int j = 0; j < n_half; ++j) {
                ans[i][j + n_half] = sub_schedule[i][j] + n_half;
                ans[i + n_half][j] = sub_schedule[i][j] + n_half;
            }
        }
    return ans;
  }