#include <iostream>
#include <vector>
using namespace std;

int max(int a, int b) {
    return a > b ? a : b;
}

int calculateResourceSum(const vector<int> &nodeValues, int currentNodeIndex) {
    int nodesCount = nodeValues.size();
    if (currentNodeIndex >= nodesCount || nodeValues[currentNodeIndex] == -1) return 0;
    int resourceTotal = max(calculateResourceSum(nodeValues, 2 * currentNodeIndex + 1), calculateResourceSum(nodeValues, 2 * currentNodeIndex + 2)) + nodeValues[currentNodeIndex];
    return resourceTotal;
}

int main(void) {
    vector<int> nodeValues;
    int value, totalNodesCount, treeHeight = 0;
    long long specialAreaSum = 0;
    while (cin >> value) nodeValues.push_back(value);

    if (nodeValues[0] == -1) {
        cout << 0 << endl << 0 << endl << 0;
        return 0;
    }

    totalNodesCount = nodeValues.size();
    
    for (int i = 1; i <= totalNodesCount; i *= 2) {
        treeHeight++;
    }

    bool leftChildExists = false, rightChildExists = false;
    for (int currentNodeIndex = 0; currentNodeIndex < totalNodesCount; ++currentNodeIndex) {
        leftChildExists = false;
        rightChildExists = false;
        if (currentNodeIndex * 2 + 1 < totalNodesCount && nodeValues[currentNodeIndex * 2 + 1] != -1) leftChildExists = true;
        if (currentNodeIndex * 2 + 2 < totalNodesCount && nodeValues[currentNodeIndex * 2 + 2] != -1) rightChildExists = true;

        if (leftChildExists || rightChildExists) {
            if (leftChildExists && rightChildExists && nodeValues[currentNodeIndex] > nodeValues[currentNodeIndex * 2 + 1] && nodeValues[currentNodeIndex] > nodeValues[currentNodeIndex * 2 + 2]) {
                specialAreaSum += nodeValues[currentNodeIndex];
            } else if (leftChildExists && nodeValues[currentNodeIndex] > nodeValues[currentNodeIndex * 2 + 1] && !rightChildExists) {
                specialAreaSum += nodeValues[currentNodeIndex];
            } else if (rightChildExists && nodeValues[currentNodeIndex] > nodeValues[currentNodeIndex * 2 + 2] && !leftChildExists) {
                specialAreaSum += nodeValues[currentNodeIndex];
            }
        }
    }

    cout << treeHeight << endl; 
    cout << calculateResourceSum(nodeValues, 0) << endl; 
    cout << specialAreaSum << endl; 

    return 0;
}