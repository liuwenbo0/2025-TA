#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum=-2147483648, right_sum=-2147483648;
    int sum=0;
    for(int i=mid; i>=low; i--){
        sum=sum+A[i];
        if(sum>left_sum){
            left_sum=sum;
        }
    }
    sum=0;
    for(int i=mid+1; i<=high; i++){
        sum=sum+A[i];
        if(sum>right_sum){
            right_sum=sum;
        }
    }
    return left_sum+right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(high==low){
        return A[low];
    }
    else {
        int mid=(high+low)/2;
        int left_sum, right_sum, cross_sum;
        left_sum=Solution::find_maximum_subarray(A, low, mid);
        right_sum=Solution::find_maximum_subarray(A, mid+1, high);
        cross_sum=Solution::find_maximum_crossing_subarray(A, low, mid, high);
        if(left_sum>right_sum && left_sum>cross_sum){
            return left_sum;
        }
        else if(right_sum>left_sum && right_sum>cross_sum){
            return right_sum;
        }
        else {
            return cross_sum;
        }
    }
}