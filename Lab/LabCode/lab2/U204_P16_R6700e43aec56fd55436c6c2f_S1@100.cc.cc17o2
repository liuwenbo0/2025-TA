#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) 
{
    // 请在这里完成你的代码
    int lsum=-100000;
    int sum=0;
    
    for(int i=mid;i>=low;i--)
    {
        sum+=A[i];
        if(sum>lsum)
        {
            lsum=sum;
            
        }
    }
    int rsum=-100000;
    sum=0;
    for(int j=mid+1;j<=high;j++)
    {
        sum+=A[j];
        if(sum>rsum)
        {
            rsum=sum;
        
        }
    }

    return (lsum+rsum);
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high)
{
    // 请在这里完成你的代码
    if (high==low)
    return(A[low]);
    else 
    {
        int mid=(low+high)/2;
        int left3part[3];
        int right3part[3];
        int cross3part[3];
        left3part[2]=find_maximum_subarray(A,low,mid);
        right3part[2]=find_maximum_subarray(A,mid+1,high);
        cross3part[2]=find_maximum_crossing_subarray(A,low,mid,high);
        if(left3part[2]>=right3part[2]&&left3part[2]>cross3part[2])
        return (left3part[2]);
        else if(right3part[2]>=left3part[2]&&right3part[2]>cross3part[2])
        return (right3part[2]);
        else return (cross3part[2]);

    
    }
    return 0;
}