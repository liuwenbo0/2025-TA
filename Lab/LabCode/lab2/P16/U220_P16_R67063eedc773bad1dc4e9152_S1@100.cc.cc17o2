#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 初始化变量
    int left_sum = INT_MIN;
    int right_sum = INT_MIN;
    int sum = 0;

    // 计算从中间点到左侧的最大子数组和
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }

    // 重置sum，计算从中间点到右侧的最大子数组和
    sum = 0;
    for (int i = mid + 1; i <= high; i++) {
        sum += A[i];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }

    // 返回跨越中间点的最大子数组和
    return left_sum + right_sum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 基本情况：数组中只有一个元素
    if (low == high) {
        return A[low];
    }

    // 找到中间点
    int mid = (low + high) / 2;

    // 递归找到左侧、右侧和跨越中间点的最大子数组和
    int left_sum = find_maximum_subarray(A, low, mid);
    int right_sum = find_maximum_subarray(A, mid + 1, high);
    int cross_sum = find_maximum_crossing_subarray(A, low, mid, high);

    // 返回三者中的最大值
    return max(max(left_sum, right_sum), cross_sum);
}