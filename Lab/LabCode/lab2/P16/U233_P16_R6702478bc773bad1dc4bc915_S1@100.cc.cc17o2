#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    int sum = 0, left_sum = INT_MIN, right_sum = INT_MIN;
    for(int i = mid; i > low - 1; i--){
        sum += A[i];
        if(sum > left_sum){
            left_sum = sum;
        }
    }
    sum = 0;
    for(int i = mid + 1; i < high + 1; i++){
        sum += A[i];
        if(sum > right_sum){
            right_sum = sum;
        }
    }
    return left_sum + right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(high == low) return A[low];
    else{
        int mid = (low + high)/2;
        int left_sum = find_maximum_subarray(A, low, mid);
        int right_sum = find_maximum_subarray(A, mid + 1, high);
        int cross_sum = find_maximum_crossing_subarray(A, low, mid, high);
        //计算各部分子列和
        return std::max({left_sum, right_sum, cross_sum});
        //返回三个变量中最大值
    }
}