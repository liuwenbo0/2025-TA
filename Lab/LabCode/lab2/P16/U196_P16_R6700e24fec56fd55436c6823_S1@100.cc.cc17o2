#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    if(low==high){
        return A[low];
    }
    int leftsum=INT_MIN;
    int currsum=0;
    for(int i=mid;i>=low;i--){
        currsum+=A[i];
        leftsum=max(leftsum,currsum);
    }
    int rightsum=INT_MIN;
    currsum=0;
    for(int j=mid+1;j<=high;j++){
        currsum+=A[j];
        rightsum=max(rightsum,currsum);
    }
    return leftsum+rightsum;
    return 0;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(low==high){
        return A[low];
    }
    int mid=(low+high)/2;
    int leftsums=find_maximum_subarray(A,low,mid);
    int rightsums=find_maximum_subarray(A,mid+1,high);
    int crosssum=find_maximum_crossing_subarray(A,low,mid,high);
    return max(max(leftsums,rightsums),crosssum);
    return 0;
}