#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int s = -10000,a = -10000;
    int x = 0,y=0;
    for(int i=mid;i>=low;i--){
        x=x+A[i];
        if(x>=s){
            s=x;
        }
    }
    for(int i=mid;i<=high;i++){
        y=y+A[i];
        if(y>=a){
            a=y;
        }
    }
    int o=s+a-A[mid];
    return(o);
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int le,re,me,mid;
    if (high-1<=low){
    int m=A[low]+A[high];
    if(A[low]>=A[high]&&A[low]>=m)
        return (A[low]);
        else if (A[high]>=A[low]&&A[high]>=m)
        return(A[high]);
        else return(m);  
    }
    else{
        mid=(low+high)/2;
        le=find_maximum_subarray(A,low,mid);
        re=find_maximum_subarray(A,mid,high);
        me=find_maximum_crossing_subarray(A,low,mid,high);
        if(le>=re&&le>=me)
        return (le);
        else if (re>=le&&re>=me)
        return(re);
        else return(me);        
    }
}