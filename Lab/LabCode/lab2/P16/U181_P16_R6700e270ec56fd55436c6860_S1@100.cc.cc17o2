#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    int sum1=0,left_sum = -100000;
    for(int i=mid; i>=low; i--){
        sum1 = sum1 + A[i];
        if(sum1>left_sum){
            left_sum = sum1;
        }
    }

    int sum2=0,right_sum = -100000;
    for(int j=mid+1;j<=high;j++){
        sum2 = sum2 + A[j];
        if(sum2>right_sum){
            right_sum = sum2;
        }
    }
    //A.low = max_left;
    //A.high = max_right;
    return left_sum + right_sum;

    return 0;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(high==low) return A[high];
    else{
      int mid = (high + low)/2;
      int left_sum1 = Solution::find_maximum_subarray(A,low,mid);
      int right_sum1 = Solution::find_maximum_subarray(A,mid+1,high);
      int cross_sum1 = Solution::find_maximum_crossing_subarray(A,low,mid,high);
      if (left_sum1 > right_sum1 && left_sum1 > cross_sum1) return left_sum1;
      else if (right_sum1 > left_sum1 && right_sum1 > cross_sum1) return right_sum1;
      else return cross_sum1;
    }
    
    return 0;
}