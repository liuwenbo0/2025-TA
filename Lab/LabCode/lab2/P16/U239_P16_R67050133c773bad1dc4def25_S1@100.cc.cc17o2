#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
int left_sum=INT_MIN;
int sum=0;
int max_left=mid;
for(int i=mid;i>=low;i--)
{
    sum+=A[i];
    if(sum>left_sum)
    {
        left_sum=sum;
        max_left=i;
    }
}
int right_sum=INT_MIN;
sum=0;
int max_right=mid+1;
for(int j=mid+1;j<=high;j++)
{
    sum+=A[j];
    if(sum>right_sum)
    {
        right_sum=sum;
        max_right=j;
    }
}


    return left_sum+right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
if(high==low)
{
    return A[low];
}
else
{
    int mid=(low+high)/2;
    int left_sum=find_maximum_subarray(A,low,mid);
    int right_sum=find_maximum_subarray(A,mid+1,high);
    int cross_sum=find_maximum_crossing_subarray(A,low,mid,high);
    return max({left_sum,right_sum,cross_sum});
}
    return 0;
}