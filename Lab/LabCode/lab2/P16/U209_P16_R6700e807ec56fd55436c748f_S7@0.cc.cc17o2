#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
int leftsum=INT_MIN;
int sum=0;
for(int i=mid;i>=low;i--)
{
    sum+=A[i];
    if(sum>leftsum)leftsum=sum;
}
int rightsum=INT_MIN;
sum=0;
for(int j=mid+1;j<=high;j++){
    sum+=A[j];
    if(sum>rightsum)rightsum=sum;
}
    return leftsum+rightsum;

    return 0;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
if(low==high){
    return A[low];
}
else{
    int mid=(low+high)/2
    int leftsum=find_maximum_subarray(A,low,high);
    int rightsum=find_maximum_subarray(A,mid +1,high);
    int crosssum=find_maximum_crossing_subarray(A,low,mid,high);
    return max(max(leftsum,rightsum),crosssum)
}    
    return 0;
}