#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum = A[mid];
    int sum = A[mid];
    for (int i = mid - 1; i >= low; i--) {
        sum += A[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }

    int right_sum = A[mid + 1];
    sum = A[mid + 1];
    for (int j = mid + 2; j <= high; j++) {
        sum += A[j];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }
    return left_sum + right_sum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (low == high) {
        return A[low];
    }
    int mid = (low + high) / 2;
    return std::max({find_maximum_subarray(A, low, mid), find_maximum_subarray(A, mid + 1, high), find_maximum_crossing_subarray(A, low, mid, high)});
}