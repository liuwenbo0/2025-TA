#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
   
    int leftsum=0;
    int sum = 0;
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > leftsum) {
            leftsum = sum;  }
    }

    int rightsum=0;
    sum = 0;
    for (int i = mid + 1; i<= high; i++) {
        sum += A[i];
        if (sum > rightsum) {
            rightsum = sum;}
    }                     
    return leftsum+rightsum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) 
{     if (low==high) {
        return A[high];}
    int mid = (low + high) / 2;
    int left= find_maximum_subarray(A, low, mid);
    int right= find_maximum_subarray(A, mid + 1, high);
    int cross = find_maximum_crossing_subarray(A, low, mid, high);
    int max=0;
    if(left>=max){
        max=left;}
    if(right>=max){
        max=right;}
    if(cross>=max){
        max=cross;
    }
    return max;
}