#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int sum = 0;
    int maxSum = 0;
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > maxSum) {
            maxSum = sum;
        }
    }
    sum = 0;
    int rightMaxSum = 0;
    for (int i = mid + 1; i <= high; i++) {
        sum += A[i];
        if (sum > rightMaxSum) {
            rightMaxSum = sum;
        }
    }
    return maxSum+rightMaxSum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
     if (low == high) {
        return A[low];
    }
    int mid = low + (high - low) / 2;
    int leftMax = 0;
    leftMax = find_maximum_subarray(A, low, mid);
    int rightMax = 0;
    rightMax = find_maximum_subarray(A, mid + 1, high);
    int crossMax = 0;
    crossMax = find_maximum_crossing_subarray(A, low, mid, high);
    return max(max(leftMax,rightMax),crossMax);
}