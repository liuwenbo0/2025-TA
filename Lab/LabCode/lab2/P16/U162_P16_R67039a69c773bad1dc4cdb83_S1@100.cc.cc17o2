#include "Solution.h"

#include <algorithm> 
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    
    int left_sum=INT_MIN;
    int sum=0;
    
    for(int i=mid;i>=low;i--){
      sum+=A[i];
      if(sum>left_sum){
        left_sum=sum;
      }

    }
    sum=0;
   
    int right_sum=INT_MIN;
    for(int i=mid+1;i<=high;i++){
      sum+=A[i];
      if(sum>right_sum){
        right_sum=sum;
        
      }
    }

    return (right_sum+left_sum);


    
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
  if(low==high){ return A[low];
    }
    
  else{
    int mid=(low+high)/2;
    int left_max=find_maximum_subarray(A,low,mid);
    int right_max=find_maximum_subarray(A,mid+1,high);
    int cross_max=find_maximum_crossing_subarray(A,low,mid,high);
    if(left_max>=right_max&&left_max>=cross_max) return left_max;
    else if(right_max>=left_max&&right_max>=cross_max) return right_max;
    else if(cross_max>=right_max&&cross_max>=left_max) return cross_max;
    


    
    
  }
}