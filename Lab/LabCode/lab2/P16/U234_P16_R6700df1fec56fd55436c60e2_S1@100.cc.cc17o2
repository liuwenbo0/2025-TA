#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    long long leftsum=-100000000,rightsum=-100000000;
    int sum,i,j,maxleft=0,maxright=0,crosssum;
    for(i=mid,sum=0;i>=low;i--){
        sum+=A[i];
        if(sum>leftsum){
            leftsum=sum;
            maxleft=i;
        }
    }
    for(j=mid+1,sum=0;j<=high;j++){
        sum+=A[j];
        if(sum>rightsum){
            rightsum=sum;
            maxright=j;
        }
    }
    for(i=maxleft,crosssum=0;i<=maxright;i++)  crosssum+=A[i];
    return crosssum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int leftsum,rightsum,crosssum,mid;
    if(high==low)  return A[low];
    else{
        mid=(low+high)/2;
        leftsum=Solution::find_maximum_subarray(A,low,mid);
        rightsum=Solution::find_maximum_subarray(A,mid+1,high);
        crosssum=Solution::find_maximum_crossing_subarray(A,low,mid,high);
        if(leftsum>=rightsum&&leftsum>=crosssum)  return leftsum;
        else if(rightsum>=leftsum&&rightsum>=crosssum)  return rightsum;
        else  return crosssum;
    }
}