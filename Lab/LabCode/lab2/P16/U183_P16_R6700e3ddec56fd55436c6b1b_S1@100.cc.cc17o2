#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int sum=0;
    int leftsum=INT_MIN;
    int i;
    for(i=mid;i>=low;i--){
        sum=sum+A[i];
        if(sum>leftsum){
            leftsum=sum;
        }
    }
    sum=0;
    int rightsum=INT_MIN;
    for(i=mid+1;i<=high;i++){
        sum=sum+A[i];
        if(sum>rightsum){
            rightsum=sum;
        }
        
    }


    return leftsum+rightsum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int mid,leftsum,rightsum,crossingsum;
    if(low==high){
        return A[low];
    }
    else{
        mid=(low+high)/2;
        leftsum = find_maximum_subarray(A, low, mid);
        rightsum = find_maximum_subarray(A, mid + 1, high);
        crossingsum = find_maximum_crossing_subarray(A, low, mid, high);
        
    }
    
    return max(leftsum,max(rightsum,crossingsum));
}