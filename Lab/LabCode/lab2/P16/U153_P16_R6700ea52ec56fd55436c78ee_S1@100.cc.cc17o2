#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    int left_sum = INT_MIN;
    int sum1 = 0;
    //int max_left;
    for(int i = mid; i >= low; i--){
        sum1 = sum1 + A[i];
        if(sum1 > left_sum){
            left_sum = sum1;
            //max_left = i;
        }
    }
    int right_sum = INT_MIN;
    int sum2 = 0;
    //int max_right;
    for(int j = mid + 1; j <= high; j++){
        sum2 = sum2 + A[j];
        if(sum2 > right_sum){
            right_sum = sum2;
            //max_right = j;
        }
    }
    return left_sum + right_sum;
}



int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(high == low){
        return max({A[low], 0}); //base case: only one element
    }
    else{
        int mid = low + (high - low) / 2;
        int left_sum = find_maximum_subarray(A, low, mid);
        int right_sum = find_maximum_subarray(A, mid + 1, high);
        int cross_sum = find_maximum_crossing_subarray(A, low, mid, high);
        return max({left_sum, right_sum, cross_sum});
    }
}