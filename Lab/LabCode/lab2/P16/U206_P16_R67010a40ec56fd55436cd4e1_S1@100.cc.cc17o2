#include "Solution.h"
#include <algorithm>
using namespace std;
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) 
{
    int sum = 0,num =0;
    int l_sum = 0; 
    int r_sum = 0;
    for (int i = mid; i >= low; i--) 
    {
        sum += A[i];
        if (sum >= l_sum) 
        {
            l_sum =sum;
        }
    }
    for (int i = mid + 1; i <= high;i++) 
    {
        num+= A[i];
        if (num > r_sum) 
        {
            r_sum = num;
        }
    }

    return l_sum + r_sum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) 
{
    if (low == high) 
    {
        return A[low];
    }

    int mid = low + (high - low) / 2;
    int l_max = find_maximum_subarray(A, low, mid);
    int r_max = find_maximum_subarray(A, mid + 1, high);
    int m_max = find_maximum_crossing_subarray(A, low, mid, high);

    return max(max(l_max, r_max), m_max);
}