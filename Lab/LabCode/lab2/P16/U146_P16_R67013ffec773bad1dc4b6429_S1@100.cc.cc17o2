#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int sum = INT_MIN;
    int left_sum = INT_MIN; 
    int right_sum = INT_MIN; 
    int left_sub_sum = 0; 
    int right_sub_sum = 0; 

    for (int i = mid; i >= low; i--) {
        left_sub_sum += A[i];
        if (left_sub_sum > left_sum) {
            left_sum = left_sub_sum;
        }
    }

    for (int i = mid + 1; i <= high; i++) {
        right_sub_sum += A[i];
        if (right_sub_sum > right_sum) {
            right_sum = right_sub_sum;
        }
    }

    sum = left_sum + right_sum;

    return sum;
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (low == high) {
        return A[low];
    }

    int mid = (low + high) / 2;
    int left_max = find_maximum_subarray(A, low, mid);
    int right_max = find_maximum_subarray(A, mid + 1, high);
    int cross_max = find_maximum_crossing_subarray(A, low, mid, high);

    return max(left_max, max(right_max, cross_max));
}