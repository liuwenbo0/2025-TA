#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    // 请在这里完成你的代码
    
    int left_sum = INT_MIN;
    int right_sum = INT_MIN;
    int mid_sum = 0;
    for(int i = mid;i>=low;i--){

        mid_sum = mid_sum + A[i];
        if(mid_sum >left_sum)
            left_sum = mid_sum;
    }
    mid_sum = 0;
    for(int i = mid+1;i<=high;i++){
        mid_sum = mid_sum + A[i];

        if(right_sum<mid_sum){
            right_sum = mid_sum;
        }
    }
    return right_sum + left_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    // 请在这里完成你的代码
    if(low == high){
        return A[low];

    }
    else{
        int mid = (low + high) / 2;

        int left_sum = find_maximum_subarray(A, low, mid);
        int right_sum = find_maximum_subarray(A, mid + 1, high);
        int mid_sum = find_maximum_crossing_subarray(A, low, mid, high);
        
        return max({left_sum, right_sum, mid_sum});
    
}
}