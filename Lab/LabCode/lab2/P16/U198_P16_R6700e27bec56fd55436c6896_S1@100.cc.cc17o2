#include "Solution.h"

int Solution::find_maximum_crossing_subarray(vector<int>& A, int low, int mid, int high) {
    int left_max = INT_MIN;
    int sum = 0;
    for (int i = mid; i >= low; i--)
    {
        sum += A[i];
        if (sum >= left_max) left_max = sum;
    }

    int right_max = INT_MIN;
    sum = 0;
    for (int i = mid + 1; i <= high; i++)
    {
        sum += A[i];
        if (sum >= right_max) right_max = sum;
    }
    return (left_max+right_max);
}
int Solution::find_maximum_subarray(vector<int>& A, int low, int high) {
    if (low == high) return A[low];
    else {
        int mid = (low + high) / 2;
        int left_max = find_maximum_subarray(A, low, mid);
        int right_max = find_maximum_subarray(A, mid + 1, high);
        int cross_max = find_maximum_crossing_subarray(A, low, mid, high);
        if (left_max >= right_max && left_max >= cross_max) return left_max;
        else if (cross_max >= right_max && cross_max > left_max) return cross_max;
        else return right_max;
    }
}