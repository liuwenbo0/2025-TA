#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum=-65535,right_sum=-65535,sum=0;
    for(int i=mid;i>=low;i--){
        sum+=A[i];
        if(sum>left_sum){
            left_sum=sum;
        }
    }
    sum=0;
    for(int i=mid+1;i<=high;i++){
        sum+=A[i];
        if(sum>right_sum){
            right_sum=sum;
        }
    }
    return right_sum+left_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    int leftsum,rightsum,crosssum;
    if(high==low) return A[low];
    else{
        int mid = (high+low)/2;
        leftsum=Solution::find_maximum_subarray(A, low, mid);  
        rightsum=Solution::find_maximum_subarray(A, mid+1, high);  
        crosssum=Solution::find_maximum_crossing_subarray(A, low, mid, high);
        if(leftsum>=rightsum&&leftsum>=crosssum) return leftsum;
        else if(rightsum>=leftsum&&rightsum>=crosssum) return rightsum;
        else return crosssum;
    }

    
    return 0;
}