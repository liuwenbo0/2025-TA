#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum=INT_MIN,right_sum=INT_MIN;
    int sum1=0,sum2=0;
    for(int i=mid;i>=low;i--){
        sum1+=A[i];
        if(sum1>left_sum){
            left_sum=sum1;
        }
    }
    for(int j=mid+1;j<=high;j++){
        sum2+=A[j];
        if(sum2>right_sum){
            right_sum=sum2;
        }
    }
    return left_sum+right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if(high==low){
        return A[low];
    }
    else{
        int mid=(low+high)/2;
        int left_max =Solution::find_maximum_subarray(A,low,mid);
        int right_max =Solution::find_maximum_subarray(A,mid+1,high);
        int cross_max =Solution::find_maximum_crossing_subarray(A,low,mid,high);
    return max(left_max, max(right_max, cross_max));
    }
}