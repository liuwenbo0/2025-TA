#include <vector>
#include <iostream>

using namespace std;

class Solution {
public:
    vector<vector<int>> round_robin_schedule(int n) {
        vector<vector<int>> ans(n, vector<int>(n, 0));
        
        for (int i = 0; i < n; ++i) {
            ans[i][0] = i + 1;
        }
        
        fill_schedule(ans, 0, n, 0);
        
        return ans;
    }

private:
    void fill_schedule(vector<vector<int>>& ans, int start, int n, int day) {
        if (n == 1) return; 
        
        int m = n / 2; 
        
        fill_schedule(ans, start, m, day); 
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < m; ++j) {
                ans[start + m + i][day + j + 1] = 
                    (ans[start + i][day + j] + m - 1) % n + 1;
            }
        }
        
        for (int i = 0; i < m; ++i) {
            ans[start + i][day + 1] = ans[start + m - i - 1][day];
        }
        
        fill_schedule(ans, start + m, m, day + 1);
    }
};

int main() {
    Solution solution;
    int n = 8; // 可以改为其他的n值进行测试
    vector<vector<int>> schedule = solution.round_robin_schedule(n);
    
    for (const auto& row : schedule) {
        for (int match : row) {
            cout << match << " ";
        }
        cout << endl;
    }
    return 0;
}