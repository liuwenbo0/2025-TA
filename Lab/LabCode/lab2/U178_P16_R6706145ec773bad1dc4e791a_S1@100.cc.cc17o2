#include "Solution.h"
#include <algorithm>
#include <vector>

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum = INT_MIN, right_sum = INT_MIN;
    int sum = 0;
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }
    sum = 0;
    for (int i = mid + 1; i <= high; i++) {
        sum += A[i];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }
    return left_sum + right_sum;
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (high == low) {
        return A[low];
    }
    int mid = (low + high) / 2;
    int left_max = find_maximum_subarray(A, low, mid);
    int right_max = find_maximum_subarray(A, mid + 1, high);
    int crossing_max = find_maximum_crossing_subarray(A, low, mid, high);
    if (left_max >= right_max && left_max >= crossing_max) {
        return left_max;
    } else if (right_max >= left_max && right_max >= crossing_max) {
        return right_max;
    } else {
        return crossing_max;
    }
}