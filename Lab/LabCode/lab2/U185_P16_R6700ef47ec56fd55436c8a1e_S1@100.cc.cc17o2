#include "Solution.h"
#include <vector>
#include <tuple>
#include <limits.h>

using namespace std;

int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum = INT_MIN, right_sum = INT_MIN;
    int sum = 0;

    // 计算左半部分的最大子数组和
    for (int i = mid; i >= low; --i) {
        sum += A[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }

    sum = 0;

    // 计算右半部分的最大子数组和
    for (int i = mid + 1; i <= high; ++i) {
        sum += A[i];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }

    return left_sum + right_sum; // 返回跨越中间的最大子数组和
}

int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (low == high) {
        return A[low]; // 只有一个元素
    }

    int mid = (low + high) / 2;

    // 递归计算左半部分、右半部分和跨越部分的最大子数组和
    int left_sum = find_maximum_subarray(A, low, mid);
    int right_sum = find_maximum_subarray(A, mid + 1, high);
    int cross_sum = find_maximum_crossing_subarray(A, low, mid, high);

 if (left_sum>=right_sum && left_sum >= cross_sum) {
        return left_sum;
    } else if (right_sum>=left_sum && right_sum >= cross_sum){
        return right_sum;
    } else {
        return cross_sum;
    }
// 返回最大值
}