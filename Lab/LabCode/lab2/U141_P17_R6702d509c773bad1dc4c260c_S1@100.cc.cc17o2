#include "Solution.h"
#include <vector>
using namespace std;

void buildRoundRobin(vector<vector<int>>& roundRobinTable, int size, int initIndex) {
    if (size == 2) {
        roundRobinTable[initIndex][initIndex] = initIndex + 1;
        roundRobinTable[initIndex][initIndex + 1] = initIndex + 2;
        roundRobinTable[initIndex + 1][initIndex] = initIndex + 2;
        roundRobinTable[initIndex + 1][initIndex + 1] = initIndex + 1;
        return;
    }

    int halfSize = size / 2;
    buildRoundRobin(roundRobinTable, halfSize, initIndex);
    buildRoundRobin(roundRobinTable, halfSize, initIndex + halfSize);

    for (int row = 0; row < halfSize; ++row) {
        for (int col = 0; col < halfSize; ++col) {
            roundRobinTable[initIndex + row][initIndex + halfSize + col] = roundRobinTable[initIndex + row][initIndex + col] + halfSize;
            roundRobinTable[initIndex + halfSize + row][initIndex + col] = roundRobinTable[initIndex + row][initIndex + col] + halfSize;
            roundRobinTable[initIndex + halfSize + row][initIndex + halfSize + col] = roundRobinTable[initIndex + row][initIndex + col];
        }
    }
}

vector<vector<int>> Solution::round_robin_schedule(int teamCount) {
    vector<vector<int>> schedule(teamCount, vector<int>(teamCount, 0));
    for (int team = 0; team < teamCount; team++) {
        schedule[team][0] = team + 1;
    }
    buildRoundRobin(schedule, teamCount, 0);
    return schedule;
}