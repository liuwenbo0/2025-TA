#include <iostream>
#include <vector>
using namespace std;

int calculateSubtreeSum(vector<int> &binaryTree, int currentNode) {
    int treeSize = binaryTree.size();
        
            
                if (currentNode >= treeSize || binaryTree[currentNode] == -1) return 0;
                    
                        
                            int totalSum = max(calculateSubtreeSum(binaryTree, 2 * currentNode + 1),
                                                   calculateSubtreeSum(binaryTree, 2 * currentNode + 2)) + binaryTree[currentNode];
                                                       return totalSum;
                                                       }

                                                       int main(void) {
                                                           vector<int> binaryTree; 
                                                               int leafValueInput, totalNodes, treeHeight = 0; 
                                                                   long long specialNodeSum = 0;

                                                                       
                                                                           while (cin >> leafValueInput) binaryTree.push_back(leafValueInput);

                                                                               
                                                                                   if (binaryTree[0] == -1) {
                                                                                           cout << 0 << endl << 0 << endl << 0;
                                                                                                   return 0;
                                                                                                       }

                                                                                                           totalNodes = binaryTree.size();
                                                                                                               int currentLeafValue = 0;

                                                                                                                   
                                                                                                                       if (totalNodes > 0) {
                                                                                                                               currentLeafValue = 1;
                                                                                                                                       while (currentLeafValue <= totalNodes) {
                                                                                                                                                   currentLeafValue *= 2;
                                                                                                                                                               treeHeight++;
                                                                                                                                                                       }
                                                                                                                                                                           }

                                                                                                                                                                               bool leftChildExists = false, rightChildExists = false; 
                                                                                                                                                                                   for (int i = 0; i < totalNodes; ++i) {
                                                                                                                                                                                           
                                                                                                                                                                                                   if (i * 2 + 1 < totalNodes && binaryTree[i * 2 + 1] != -1) leftChildExists = true;
                                                                                                                                                                                                           
                                                                                                                                                                                                                   
                                                                                                                                                                                                                           if (i * 2 + 2 < totalNodes && binaryTree[i * 2 + 2] != -1) rightChildExists = true;

                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                           if (leftChildExists || rightChildExists) {
                                                                                                                                                                                                                                                       if (leftChildExists && rightChildExists && binaryTree[i] > binaryTree[i * 2 + 1] && binaryTree[i] > binaryTree[i * 2 + 2]) {
                                                                                                                                                                                                                                                                       specialNodeSum += binaryTree[i]; 
                                                                                                                                                                                                                                                                                   } else if (leftChildExists && binaryTree[i] > binaryTree[i * 2 + 1] && !rightChildExists) {
                                                                                                                                                                                                                                                                                                   specialNodeSum += binaryTree[i]; 
                                                                                                                                                                                                                                                                                                               } else if (rightChildExists && binaryTree[i] > binaryTree[i * 2 + 2] && !leftChildExists) {
                                                                                                                                                                                                                                                                                                                               specialNodeSum += binaryTree[i]; 
                                                                                                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                                                                                                                                           leftChildExists = false; 
                                                                                                                                                                                                                                                                                                                                                                                   rightChildExists = false; 
                                                                                                                                                                                                                                                                                                                                                                                       }

                                                                                                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                                                              cout << treeHeight << endl; 
                                                                                                                                                                                                                                                                                                                                                                                                  cout << calculateSubtreeSum(binaryTree, 0) << endl; 
                                                                                                                                                                                                                                                                                                                                                                                                      cout << specialNodeSum << endl; 

                                                                                                                                                                                                                                                                                                                                                                                                          return 0; 
                                                                                                                                                                                                                                                                                                                                                                                                          }