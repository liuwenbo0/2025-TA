#include "Solution.h"
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {
    int left_sum = INT_MIN; 
    int right_sum = INT_MIN; 
    int sum = 0;
    for (int i = mid; i >= low; i--) {
        sum += A[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }
    sum = 0;
    for (int i = mid + 1; i <= high; i++) {
        sum += A[i];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }
    return left_sum + right_sum; 
}
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {
    if (low == high) {
            return A[low]; 
        } else {
            int mid = (low + high) / 2;           
            int left_max = find_maximum_subarray(A, low, mid);
            int right_max = find_maximum_subarray(A, mid + 1, high);
            int crossing_max = find_maximum_crossing_subarray(A, low, mid, high);           
            return max(left_max, max(right_max, crossing_max));
        }
    }