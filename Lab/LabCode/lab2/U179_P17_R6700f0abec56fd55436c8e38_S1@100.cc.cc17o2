#include "Solution.h"
vector<vector<int>> Solution::round_robin_schedule(int n) {
    // 如此构造一个二维数组（ nxn 矩阵）
    vector<vector<int> > ans;
    for(int i=0; i<n; i++) {
      ans.push_back(vector<int>(n, 0));
    }
    // 请在这里完成你的代码
    if (n <= 0 || (n & (n - 1)) != 0) {
        return ans;
    }
    if (n == 2) {
        ans[0][0] = 1;
        ans[0][1] = 2;
        ans[1][0] = 2;
        ans[1][1] = 1;
        return ans;
    }
    int n_half = n / 2;
    vector<vector<int>> sub_schedule = round_robin_schedule(n_half);
    // 填充左上和右下子数组
    for (int i = 0; i < n_half; ++i) {
        for (int j = 0; j < n_half; ++j) {
            ans[i][j] = sub_schedule[i][j];
            ans[i + n_half][j + n_half] = sub_schedule[i][j];
        }
    }
    // 填充右上和左下子数组
    for (int i = 0; i < n_half; ++i) {
        for (int j = 0; j < n_half; ++j) {
            ans[i][j + n_half] = sub_schedule[i][j] + n_half;
            ans[i + n_half][j] = sub_schedule[i][j] + n_half;
        }
    }
    return ans;
  }