#include "Solution.h"  
#include <vector>  
#include <algorithm>  
#include <climits>  
  
using namespace std;  
  
int Solution::find_maximum_crossing_subarray(vector<int> &A, int low, int mid, int high) {  
    int sum = 0;  
    int left_sum = INT_MIN;  
    int max_left = mid;  
        
    for (int i = mid; i >= low; --i) {  
        sum += A[i];  
        if (sum > left_sum) {  
            left_sum = sum;  
            max_left = i;  
        }  
    }  
      
    sum = 0;  
    int right_sum = INT_MIN;  
    int max_right = mid + 1;  
      
    
    for (int j = mid + 1; j <= high; ++j) {  
        sum += A[j];  
        if (sum > right_sum) {  
            right_sum = sum;  
            max_right = j;  
        }  
    }  
      
    return left_sum + right_sum;  
}  
  
int Solution::find_maximum_subarray(vector<int> &A, int low, int high) {  
    if (low == high) {  
         
        return A[low];  
    } else {  
        int mid = (low + high) / 2;  
          
       
        int left_sum = find_maximum_subarray(A, low, mid);  
          
         
        int right_sum = find_maximum_subarray(A, mid + 1, high);  
          
         
        int cross_sum = find_maximum_crossing_subarray(A, low, mid, high);  
          
       
        return max(left_sum, max(right_sum, cross_sum));  
    }  
}