#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
 
    int mid = p + (q - p) / 2;

    if (nums[p] > nums[mid]) {
        std::swap(nums[p], nums[mid]);
    }
    if (nums[p] > nums[q]) {
        std::swap(nums[p], nums[q]);
    }
    if (nums[mid] > nums[q]) {
        std::swap(nums[mid], nums[q]);
    }

    int pivot = nums[mid]; 
    std::swap(nums[mid], nums[q]); 
    int i = p - 1;

    for (int j = p; j < q; j++) {
        if (nums[j] <= pivot) {
            i++;
            std::swap(nums[i], nums[j]);
        }
    }
    std::swap(nums[i + 1], nums[q]); 
    return i + 1; 
}


void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    const int CUTOFF = 10; 
    if (l < r) {
        if (r - l + 1 <= CUTOFF) {
         
            for (int i = l + 1; i <= r; i++) {
                int key = nums[i];
                int j = i - 1;
                while (j >= l && nums[j] > key) {
                    nums[j + 1] = nums[j];
                    j--;
                }
                nums[j + 1] = key;
            }
        } else {
            
            int pi = partition(nums, l, r);
            quick_sort(nums, l, pi - 1);
            quick_sort(nums, pi + 1, r);
        }
    }
}


void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}