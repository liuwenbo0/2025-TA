#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    // 请在这里完成你的代码
    int mid = p + (q - p) / 2;
        if (nums[mid] > nums[q]) std::swap(nums[mid], nums[q]);
        if (nums[p] > nums[q]) std::swap(nums[p], nums[q]);
        if (nums[mid] > nums[p]) std::swap(nums[mid], nums[p]);
        int x = nums[p];
        int i = p, j = q;
        while (i < j) {
            while (i < j && nums[j] >= x) --j;
            while (i < j && nums[i] <= x) ++i;
            if (i < j) std::swap(nums[i], nums[j]);
        }
        std::swap(nums[p], nums[i]);
        return i;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    // 请在这里完成你的代码
    if(l<r)
    {
        int mid=partition(nums, l, r);
    quick_sort(nums,l,mid-1);
    quick_sort(nums,mid+1,r);
    }

}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}