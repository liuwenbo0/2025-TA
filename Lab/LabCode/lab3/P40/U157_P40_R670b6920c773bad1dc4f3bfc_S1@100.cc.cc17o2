#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <cstdlib>
using namespace std;
int minCut(vector<int>& heights, int q);
int main() {
    int n, q;
    cin >> n >> q;
    vector<int> heights(n);
    for(int i=0; i<n; i++){
        cin >> heights[i];
    }
    cout << minCut(heights, q) << endl;
    return 0;
}
int minCut(vector<int>& heights, int q) {
    unordered_map<int, vector<int>> heightCuts;
    for (int height : heights) {
        int cuts=0;
        while(height>0) {
            heightCuts[height].push_back(cuts);
            height/=2;
            cuts++;
        }
    }
    vector<int> totalCuts; 
    for (auto& pair : heightCuts) {
        vector<int>& cuts=pair.second;
        sort(cuts.begin(), cuts.end());
        if(static_cast<int>(cuts.size())>=q) {
            int sum = 0;
            for(int i=0; i<q; i++) {
                sum+=cuts[i];
            }
            totalCuts.push_back(sum);
        }
    }
    return *min_element(totalCuts.begin(), totalCuts.end());
}