#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <climits>

using namespace std;

int compare(const void *a, const void *b) {
    return *(int *)b - *(int *)a;
}

int f(vector<int>& heights, int n, int q) {
    if (q == 0) return 0;
    qsort(heights.data(), n, sizeof(int), compare); 
    int maxheight = heights[0];
    int maxtimes = 0;
    while (maxheight > 1) {
        maxtimes++;
        maxheight /= 2;
    }
    maxheight = heights[0];
    
    vector<vector<int>> nums(maxtimes + 2, vector<int>(maxheight + 1, 0));
    
    for (int i = 0; i < n; i++) {
        nums[0][heights[i]]++;
        nums[maxtimes + 1][heights[i]]++;
    }
    
    int temp;
    int ans = INT_MAX;
    int anstemp;
    int qq = q;
    
    for (int i = 1; i <= maxtimes; i++) {
        temp = pow(2, i - 1);
        for (int j = 1; j * temp <= maxheight; j++) {
            nums[i][j / 2] += nums[i - 1][j];
            nums[maxtimes + 1][j / 2] += nums[i - 1][j];
            if (nums[maxtimes + 1][j / 2] >= q) {
                anstemp = 0;
                qq = q;
                for (int k = 0; k <= i; k++) {
                    if (qq > nums[k][j / 2]) {
                        qq -= nums[k][j / 2];
                    } else {
                        anstemp += k * qq;
                        break;
                    }
                    anstemp += k * nums[k][j / 2];
                }
                if (anstemp < ans) ans = anstemp;
            }
        }
    }
    
    return ans;
}

int main() {
    int n, q;
    cin >> n >> q;
    vector<int> heights(n);
    for (int i = 0; i < n; i++) {
        cin >> heights[i];
    }
    cout << f(heights, n, q) << endl;
    return 0;
}