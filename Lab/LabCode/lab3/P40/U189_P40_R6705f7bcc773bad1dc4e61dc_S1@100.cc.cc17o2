#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <climits>

using namespace std;

int min_trimming_steps(int n, int q, const vector<int>& heights) {
    unordered_map<int, vector<int>> height_count;

    for (int height : heights) {
        int current_height = height;
        int steps = 0;

        while (current_height > 0) {
            height_count[current_height].push_back(steps);
            current_height /= 2; 
            steps++;
        }
    }

    int min_steps = INT_MAX;


    for (const auto& pair : height_count) {
        const vector<int>& step_list = pair.second;
        if (step_list.size() >= q) {
            vector<int> sorted_steps = step_list;
            sort(sorted_steps.begin(), sorted_steps.end());
            int total_steps = 0;
            for (int i = 0; i < q; ++i) {
                total_steps += sorted_steps[i];
            }
            min_steps = min(min_steps, total_steps);
        }
    }

    return min_steps == INT_MAX ? 0 : min_steps;
}

int main() {
    int n, q;
    cin >> n >> q;
    vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        cin >> heights[i];
    }

    cout << min_trimming_steps(n, q, heights) << endl;
    return 0;
}