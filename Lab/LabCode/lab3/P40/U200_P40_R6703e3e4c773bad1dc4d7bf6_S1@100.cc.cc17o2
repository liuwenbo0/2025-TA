#include<bits/stdc++.h>
using namespace std;
const int MAXN=3e5+5;
const int treeh=20;
int n,p,q,r;
long long int ans=1e12;
int t[MAXN<<1][treeh][4],settled[MAXN];

void func(int p)
{
    if(p>=MAXN) return;
    func(p<<1),func(p<<1|1);
    t[p][r][0]=t[p<<1][r-1][0]+t[p<<1|1][r-1][0];// current transferred count
    t[p][r][1]=t[p<<1][r-1][0]+t[p<<1|1][r-1][0]+t[p<<1][r-1][1]+t[p<<1|1][r-1][1];// current added cost
    t[p][r][2]=t[p][r-1][2]+t[p][r][0];// total max count
    t[p][r][3]=t[p][r-1][3]+t[p][r][1];// total corresponding max cost
    if(t[p][r][2]>=q && !settled[p]++) ans=min(ans,1ll*(t[p][r][3]-(t[p][r][2]-q)*r));
}

int main()
{
    cin>>n>>q;
    for(int i=0;i<n;++i)
    {
        cin>>p;
        if((t[p][0][2]=++t[p][0][0])>=q){cout<<0<<endl;return 0;}
    }
    for(r=1;r<treeh;++r) func(1);
    cout<<ans<<endl;
    return 0;
}