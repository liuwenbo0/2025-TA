#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <functional>
using namespace std;
int min_trims(int n, int q, vector<int>& heights) {
    unordered_map<int, int> freq;
    for (int height : heights) {
        freq[height]++;
    }
    priority_queue<int> max_heap;
    for (const auto& entry : freq) {
        max_heap.push(entry.second);
    }
    int trims = 0;
    int current_segments = 0;
    while (current_segments < q) {
        int most_frequent = max_heap.top();
        max_heap.pop();
        current_segments += most_frequent;
        trims++;
    }
    return trims;
}
int main() {
    int n, q;
    cin >> n >> q;
    vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        cin >> heights[i];
    }
    cout << min_trims(n, q, heights)-1 << endl;
    return 0;
}