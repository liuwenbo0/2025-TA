#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    srand(time(NULL));
    int m=p+rand()%(q-p+1);
    swap(nums[m],nums[q]);
  	int x=nums[q];
  	int i=p-1;
  	for(int j=p;j<q;j++){
  		if(nums[j]<=x){
  			i+=1;
  			swap(nums[j],nums[i]);
  		}
  	}
	swap(nums[i+1],nums[q]);
    return i+1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if(l<r){
    int mid=QuickSort::partition(nums,l,r);
    QuickSort::quick_sort(nums,l,mid-1);
    QuickSort::quick_sort(nums,mid+1,r);
    }
}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}