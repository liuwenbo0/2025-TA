#include <iostream>
#include <vector>

class HeapSorter {
public:
    void sort(std::vector<int>& arr);

private:
    void heapify(std::vector<int>& arr, int index, int size);
    void buildHeap(std::vector<int>& arr);
};

void HeapSorter::heapify(std::vector<int>& arr, int index, int size) {
    int largest = index;
    int left = 2 * index + 1;   
    int right = 2 * index + 2;  

    if (left < size && arr[left] > arr[largest]) {
        largest = left;
    }

    if (right < size && arr[right] > arr[largest]) {
        largest = right;
    }

    if (largest != index) {
        std::swap(arr[index], arr[largest]);
        heapify(arr, largest, size);
    }
}
void HeapSorter::buildHeap(std::vector<int>& arr) {
    int size = arr.size();
    for (int i = size / 2 - 1; i >= 0; --i) {
        heapify(arr, i, size);
    }
}
void HeapSorter::sort(std::vector<int>& arr) {
    buildHeap(arr);
    int size = arr.size();

    for (int i = size - 1; i > 0; --i) {
        std::swap(arr[0], arr[i]); 
        heapify(arr, 0, i); 
    }
}
int main() {
    int n;
    std::cin >> n;
    std::vector<int> arr(n); 
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i]; 
    }

    HeapSorter sorter;
    sorter.sort(arr);

    for (const int& num : arr) {
        std::cout << num << " "; 
    }
    std::cout << std::endl;
    return 0;
}