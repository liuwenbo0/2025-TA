#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left=2*i;
    int right=2*i+1;
    int large=i;
    if(left<=length && nums[left]>nums[large]){
        large=left;
    }
    if(right<=length && nums[right]>nums[large]){
        large=right;
    }
    if(large!=i){
        std::swap(nums[i], nums[large]);
        max_heapify(nums, large);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    length=nums.size()-1;
    for(int i=length/2;i>=1;--i) {
        max_heapify(nums, i);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    length=nums.size()-1;
    nums.insert(nums.begin(), 0);
    length++;
    build_max_heap(nums);
    for(int i=length;i>1;--i){
        std::swap(nums[1], nums[i]);
        length--;
        max_heapify(nums, 1);
    }

    nums.erase(nums.begin());
}