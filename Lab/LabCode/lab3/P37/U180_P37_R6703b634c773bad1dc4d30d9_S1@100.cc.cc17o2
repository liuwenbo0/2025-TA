#include "HeapSort.h"

void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest = i; 
    int left = 2 * i + 1; 
    int right = 2 * i + 2; 


    if (left < heap_size && nums[left] > nums[largest])
        largest = left;


    if (right < heap_size && nums[right] > nums[largest])
        largest = right;


    if (largest != i) {
        swap(nums[i], nums[largest]);

        max_heapify(nums, largest);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = nums.size();


    for (int i = heap_size / 2 - 1; i >= 0; i--)
        max_heapify(nums, i);
}

void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    build_max_heap(nums); 

    for (int end = length - 1; end > 0; end--) {
      
        swap(nums[0], nums[end]);

 
        heap_size--;

      
        max_heapify(nums, 0);
    }
}