#include "HeapSort.h"

void HeapSort::max_heapify(std::vector<int>& nums, int i) 
{
    int largest = i;       // 初始化最大元素索引为i
    int left = 2 * i + 1;  // 左子节点索引
    int right = 2 * i + 2; // 右子节点索引

    // 如果左子节点大于根节点
    if (left < length && nums[left] > nums[largest])
        largest = left;

    // 如果右子节点大于最大元素
    if (right < length && nums[right] > nums[largest])
        largest = right;

   
    if (largest != i) 
    {
        std::swap(nums[i], nums[largest]); // 交换
        max_heapify(nums, largest);        // 递归地定义子堆
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) 
{
    for (int i = (length-2) / 2 ; i >= 0; --i)
        max_heapify(nums, i);
}

void HeapSort::mysort(std::vector<int>& nums) 
{
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums);         // 构建大根堆

    // 一个个交换元素
    for (int i = nums.size() - 1; i > 1; --i) 
    {
        std::swap(nums[0], nums[i]);   // 交换
        max_heapify(nums, 0);          // 调整剩余堆
    }

    nums.erase(nums.begin()); // 删除开头元素
}