#include <algorithm> // 用于swap   
#include "HeapSort.h"

    void  HeapSort::max_heapify( std::vector<int>& nums, int i) {  
        int left = 2 * i;  
        int right = 2 * i + 1;  
        int largest = i;  
        if (left <= heap_size && (nums[left] > nums[largest])) {  
            largest = left;  
        }  
        if (right <= heap_size && (nums[right] > nums[largest])) {  
            largest = right;  
        }  
        if (largest != i) {  
            swap(nums[largest], nums[i]);  
            max_heapify(nums, largest);  
        }  
    }  
  
    void  HeapSort::build_max_heap( std:: vector<int>& nums) {  
        heap_size = length ; // 减去1是因为插入了一个0在开头，但实际数据从1开始  
        for (int i = length / 2; i >= 1; i--) { // 从最后一个非叶子节点开始  
            max_heapify(nums, i);  
        }  
    }  
  
    void HeapSort::mysort( std:: vector<int>& nums) {  
        length = nums.size();  
        nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始  
        // 请在这里完成你的代码
        heap_size = length;
        build_max_heap(nums);  
        for (int i = length; i >= 2; i--) {  
            swap(nums[i],nums[1]);
            heap_size--;
            max_heapify(nums, 1);  
        }  
        nums.erase(nums.begin()); // 删除开头元素  
    }