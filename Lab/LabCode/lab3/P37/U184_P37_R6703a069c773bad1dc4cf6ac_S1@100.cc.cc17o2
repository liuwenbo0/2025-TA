#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left=2*i,right=2*i+1,largest=i;
    if(left < heap_size && nums[left] > nums[largest]){
        largest = left;
    }
    if(right < heap_size && nums[right] > nums[largest]){
        largest = right;
    }
    if(largest!=i){
        int temp = nums[i];
        nums[i] = nums[largest];
        nums[largest] = temp;
        max_heapify(nums,largest);
    }

}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    for(int i = heap_size/2-1;i>0;i--){
        max_heapify(nums,i);
    }

}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    heap_size = nums.size();
    build_max_heap(nums);
    for(int i = length;i>1;i--){
        swap(nums[1],nums[i]);
        heap_size--;
        max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}