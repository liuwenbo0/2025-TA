#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left=2*i, right=2*i+1, largest;
    if(left<=heap_size && nums[left]>nums[i]){
        largest=left;
    }
    else largest=i;
    if(right<=heap_size && nums[right]>nums[largest]){
        largest=right;
    }
    if(largest!=i){
        int temp;
        temp=nums[i];
        nums[i]=nums[largest];
        nums[largest]=temp;
        HeapSort::max_heapify(nums, largest);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size=length;
    for(int i=length/2; i>=1; i--){
        HeapSort::max_heapify(nums, i);
    }
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    HeapSort::build_max_heap(nums);
    for(int i=length; i>=2; i--){
        int temp;
        temp=nums[1];
        nums[1]=nums[i];
        nums[i]=temp;
        heap_size=heap_size-1;
        HeapSort::max_heapify(nums, 1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}