#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l=2*i,r=2*i+1,max,temp;
    if(l<=heap_size&&nums[l]>nums[i])  max=l;
    else  max=i;
    if(r<=heap_size&&nums[r]>nums[max])  max=r;
    if(max!=i){
        temp=nums[i];
        nums[i]=nums[max];
        nums[max]=temp;
        max_heapify(nums,max);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size=length;
    int i;
    for(i=length/2;i>=1;i--)  max_heapify(nums,i);
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums);
    int i,temp;
    for(i=length;i>=2;i--){
        temp=nums[1];
        nums[1]=nums[i];
        nums[i]=temp;
        heap_size=heap_size-1;
        max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}