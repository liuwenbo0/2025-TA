#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l = 2 * i;
    int r = 2 * i + 1;
    int largest = i;


    if (l <= heap_size && nums[l] > nums[i]) {
        largest = l;
    }


    if (r <= heap_size && nums[r] > nums[largest]) {
        largest = r;
    }

    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    // 请在这里完成你的代码
   int length,leng;
   length=nums.size();
   leng=int(length/2);
   for(int i=leng;i>=1;i--)
   {
    max_heapify(nums,i);
   }


}


void HeapSort::mysort(std::vector<int>& nums) {
    int length = nums.size();
    heap_size = length;
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    // 请在这里完成你的代码
build_max_heap(nums);
    int exc;
for(int i=length;i>=2;i--)
{
    exc=nums[i];
    nums[i]=nums[1];
    nums[1]=exc;  
    heap_size=heap_size-1;     
    max_heapify(nums,1); 
}
    nums.erase(nums.begin()); // 删除开头元素
}