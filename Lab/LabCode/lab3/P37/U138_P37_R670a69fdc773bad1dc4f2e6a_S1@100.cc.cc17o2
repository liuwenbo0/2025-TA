#include <iostream>
#include <vector>

class HeapSort {
public:
    void mysort(std::vector<int>& nums);
private:
    void max_heapify(std::vector<int>& nums, int i, int size);
    void build_max_heap(std::vector<int>& nums);
};

void HeapSort::max_heapify(std::vector<int>& nums, int i, int size) {
    int largest = i;
    int left = 2 * i + 1;   
    int right = 2 * i + 2;  

    if (left < size && nums[left] > nums[largest]) {
        largest = left;
    }

    if (right < size && nums[right] > nums[largest]) {
        largest = right;
    }

    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest, size);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    int size = nums.size();
    for (int i = size / 2 - 1; i >= 0; --i) {
        max_heapify(nums, i, size);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    build_max_heap(nums);
    int size = nums.size();

    for (int i = size - 1; i > 0; --i) {
        std::swap(nums[0], nums[i]); 
        max_heapify(nums, 0, i); 
    }
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> nums(n); 

    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i]; 
    }

    HeapSort sorter;
    sorter.mysort(nums);

    for (int i = 0; i < n; ++i) {
        std::cout << nums[i] << " "; 
    }
    std::cout << std::endl;

    return 0;
}