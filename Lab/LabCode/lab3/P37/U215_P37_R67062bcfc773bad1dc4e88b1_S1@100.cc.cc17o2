#include "HeapSort.h"


void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest = i;  
    int left = 2 * i; 
    int right = 2 * i + 1; 


    if (nums[left] > nums[largest] && left <= heap_size ) {
        largest = left;
    }


    if (nums[right] > nums[largest] && right <= heap_size ) {
        largest = right;
    }


    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }
}


void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = length;


    for (int i = length / 2; i >= 1; i--) {
        max_heapify(nums, i);
    }
}


void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); 

    build_max_heap(nums);

    for (int i = length; i > 1; i--) {
        std::swap(nums[1], nums[i]);
        heap_size--; 
        max_heapify(nums, 1); 
    }

    nums.erase(nums.begin()); 
}