#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l = 2*i;
    int r = l+1;
    int large = i;
    if(l <= heap_size && nums[l] > nums[large])
     large = l;
    if(r <= heap_size && nums[r] > nums[large])
     large = r;
    if(large != i)
    {
      int swap = nums[i];
      nums[i] = nums[large];
      nums[large] = swap;
      max_heapify(nums, large);
    }

}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = nums.size()-1;
    for(int i = heap_size/2;i > 0;i--)
    {
      max_heapify(nums, i);
    } 

}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
   build_max_heap(nums);

    for (int i = length;i > 1;i--)
    {
      int swap = nums[1];
      nums[1] = nums[i];
      nums[i] = swap;
      heap_size--;
      max_heapify(nums,1);
    }

    nums.erase(nums.begin()); // 删除开头元素
}