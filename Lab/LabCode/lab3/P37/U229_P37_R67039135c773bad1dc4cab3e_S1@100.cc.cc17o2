#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
  int l=2*i,r=2*i+1;
  int largest;
  if((l<=heap_size)&&(nums[l]>nums[i]))
    largest=l;
  else
    largest=i;
  if((r<=heap_size)&&(nums[r]>nums[largest]))
      largest=r;
  if (largest!=i){
      int mark;
      mark=nums[i];
      nums[i]=nums[largest];
      nums[largest]=mark;
      max_heapify(nums,largest);}}

void HeapSort::build_max_heap(std::vector<int>& nums) {
  heap_size=length;
  for(int i=(heap_size/2);i>=1;i--){
      max_heapify(nums,i);}}

void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0);     
    build_max_heap(nums);
 for(int i=length;i>=2;i--){
      int mark;
      mark=nums[1];
      nums[1]=nums[i];
      nums[i]=mark;
      heap_size--;
      max_heapify(nums,1);}    
  nums.erase(nums.begin());}