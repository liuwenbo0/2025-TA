#include "HeapSort.h"

void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int p=0;
    if((i<<1)<=heap_size && nums[i<<1]>nums[i]) p=i<<1;
    else p=i;
    if((i<<1|1)<=heap_size && nums[i<<1|1]>nums[p]) p=i<<1|1;
    if(p!=i){
        if(nums[i]!=nums[p]) nums[i]^=nums[p]^=nums[i]^=nums[p];
        max_heapify(nums,p);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size=length;
    for(int i=length>>1;i>0;--i) max_heapify(nums,i);
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始  
    build_max_heap(nums);
    for(int i=length;i>1;--i)
    {
        if(nums[i]!=nums[1]) nums[1]^=nums[i]^=nums[1]^=nums[i];
        --heap_size;
        max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}