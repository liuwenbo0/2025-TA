#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest,l=i*2,r=i*2+1;
    if(l<=heap_size && nums[l]>nums[i]){
        largest=l;
    }
    else{
        largest=i;
    }
    if(r<=heap_size && nums[r]>nums[largest]){
        largest=r;
    }
    if(largest!=i){
        swap(nums[i],nums[largest]);
        max_heapify(nums,largest);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    length=nums.size();
    for(int i=length/2;i>0;i--){
        max_heapify(nums,i);
    }
}
void HeapSort::mysort(std::vector<int>& nums) {
    int length = nums.size();
    heap_size=length;
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums);
    for(int i=length;i>1;i--){
        swap(nums[i],nums[1]);
        heap_size--;
        max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}