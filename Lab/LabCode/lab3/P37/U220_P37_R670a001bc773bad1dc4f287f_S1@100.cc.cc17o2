#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left = 2 * i;   // 左子节点索引
    int right = 2 * i + 1; // 右子节点索引
    int largest = i;    // 假设当前节点是最大的

    // 检查左子节点
    if (left <= heap_size && nums[left] > nums[largest]) {
        largest = left;
    }
    // 检查右子节点
    if (right <= heap_size && nums[right] > nums[largest]) {
        largest = right;
    }
    // 如果最大值不是当前节点，则交换并递归调整
    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = nums.size() - 1; // 设置堆大小（不包括插入的0）
    for (int i = heap_size / 2; i >= 1; i--) {
        max_heapify(nums, i); // 从最后一个非叶子节点开始调整堆
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums); // 构建最大堆
    for (int i = length; i > 1; i--) {
        std::swap(nums[1], nums[i]); // 将当前最大元素移到数组末尾
        heap_size--; // 减小堆的大小
        max_heapify(nums, 1); // 重新调整堆
    }
    nums.erase(nums.begin()); // 删除开头元素
}