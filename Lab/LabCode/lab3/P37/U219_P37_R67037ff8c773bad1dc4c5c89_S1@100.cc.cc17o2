#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l = 2*i;
    int r = 2*i+1;

    int lar = 0;
    if(l<=length&&nums[l]>nums[i])
        lar = l;
    else 
        lar = i;
    if(r<=length&&nums[r]>nums[lar]){
        lar = r;
    }
    if(lar!=i){
        int m = nums[i];
        nums[i] = nums[lar];
        nums[lar] = m;
        max_heapify(nums,lar);
    }
    

}
void HeapSort::build_max_heap(std::vector<int>& nums) {

    for(int i = length/2;i>=1;i--){
        max_heapify(nums,i);
    }
    

}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    // 请在这里完成你的代码
    build_max_heap(nums);

    for(int i = length;i>=2;i--){
        int m = nums[1];
        nums[1] = nums[i];
        nums[i] = m;
        length--;
        max_heapify(nums,1);

    }

    nums.erase(nums.begin()); // 删除开头元素
}