#include "HeapSort.h"

// 维护最大堆性质
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left = 2 * i;     // 左子节点
    int right = 2 * i + 1; // 右子节点
    int largest = i;      // 假设当前节点是最大的

    // 如果左子节点存在且大于当前节点
    if (left <= heap_size && nums[left] > nums[largest]) {
        largest = left;
    }

    // 如果右子节点存在且大于当前最大的节点
    if (right <= heap_size && nums[right] > nums[largest]) {
        largest = right;
    }

    // 如果最大的节点不是当前节点，进行交换并递归调用max_heapify
    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }
}

// 构建最大堆
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = nums.size() - 1; // 因为我们在开头插入了一个0，所以实际元素个数是size-1
    for (int i = heap_size / 2; i >= 1; --i) {
        max_heapify(nums, i);
    }
}

// 堆排序主函数
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始

    build_max_heap(nums); // 构建最大堆

    // 从最后一个元素开始取出，将其放到已排序区域，并重新构建堆
    for (int i = length - 1; i >= 1; --i) {
        std::swap(nums[1], nums[i + 1]); // 将当前最大元素（根节点）放到已排序区域
        heap_size--; // 减小堆的大小
        max_heapify(nums, 1); // 重新调整堆
    }

    nums.erase(nums.begin()); // 删除开头元素
}