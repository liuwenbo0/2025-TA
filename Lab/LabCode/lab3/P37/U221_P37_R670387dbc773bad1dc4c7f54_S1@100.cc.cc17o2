#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    // 请在这里完成你的代码
    int largest = i; // 初始化最大值为根节点
    int left = 2 * i; // 左子结点
    int right = 2 * i + 1; // 右子结点

    // 左子结点存在且大于根结点，则更新最大值为左子结点
    if (left <= length && nums[left] > nums[largest]){
        largest = left;
    }

    // 右子结点存在且大于根结点，则更新最大值为右子结点
    if (right <= length && nums[right] > nums[largest]){
        largest = right;
    }

    // 最大值不是根节点，则交换根结点和最大值结点，递归调用函数
    if (largest != i){
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }



}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    // 请在这里完成你的代码
    // 构造最大堆,从最后一个非叶子节点开始
    for (int i = length / 2; i >= 1; --i){
        max_heapify(nums, i);
    }


}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    // 请在这里完成你的代码

    build_max_heap(nums); // 构建最大堆

    // 逐步将堆顶元素移到数组末尾，并调整堆
    for (int i = length; i >= 2; --i){
        std::swap(nums[1], nums[i]);
        --length;
        max_heapify(nums, 1);
    }

    nums.erase(nums.begin()); // 删除开头元素
}