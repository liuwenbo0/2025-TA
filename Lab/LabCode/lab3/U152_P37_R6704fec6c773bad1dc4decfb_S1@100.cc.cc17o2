#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest = i;
    int left = 2 * i;
    int right = 2 * i + 1;
    if (left <= length && nums[left] > nums[largest]) {
        largest = left;
    }
    if (right <= length && nums[right] > nums[largest]) {
        largest = right;
    }
    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    for (int i = length / 2; i >= 1; --i) {
        max_heapify(nums, i);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); 
    build_max_heap(nums);
    for (int i = length; i >= 2; --i) {
        std::swap(nums[1], nums[i]);
        --length;
        max_heapify(nums, 1);
    }
    nums.erase(nums.begin()); 
}