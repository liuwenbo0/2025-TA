#include "HeapSort.h"
void print(vector<int> &nums) {
    int n = nums.size();
    for (int i = 0; i < n; ++i) {
        cout << nums[i] << ' ';
    }
    cout << endl;
}
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    // 请在这里完成你的代码
    int largest, l = i * 2, r = i * 2 + 1;
    if(l <= heap_size && nums[i] < nums[l])largest = l;
    else largest = i;
    if(r <= heap_size && nums[largest] < nums[r])largest = r;
    if(largest - i){
        int temp = nums[i];
        nums[i] = nums[largest];
        nums[largest] = temp;
        max_heapify(nums, largest);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    // 请在这里完成你的代码
    for (int i = heap_size / 2; i >= 1; --i) max_heapify(nums, i);
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    // 请在这里完成你的代码
    heap_size = nums.size() - 1;
    //print(nums);
    build_max_heap(nums);
    //print(nums);
    for(int i = heap_size; i >= 2; --i) {
        int temp = nums[1];
        nums[1] = nums[i];
        nums[i] = temp;
        --heap_size;
        //cout << "交换后： "; print(nums);
        max_heapify(nums, 1);
        //cout << "维护后： "; print(nums);
    }
    
    nums.erase(nums.begin()); // 删除开头元素
}