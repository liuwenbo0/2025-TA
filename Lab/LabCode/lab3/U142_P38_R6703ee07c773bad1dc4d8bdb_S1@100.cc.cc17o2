#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
     // 请在这里完成你的代码
    int mid = p + (q - p) / 2;  
    
    
    
    if (nums[p] > nums[mid]) std::swap(nums[p], nums[mid]);
    if (nums[p] > nums[q]) std::swap(nums[p], nums[q]);
    
    
    
    
    
    if (nums[mid] > nums[q]) std::swap(nums[mid], nums[q]);
    int pivot = nums[mid];
    
    
    
    
    
    std::swap(nums[mid], nums[q - 1]);  
    int i = p; 
    for (int j = p; j < q; j++) {
        if (nums[j] < pivot) {
            std::swap(nums[i], nums[j]);
            i++;
        }
    }
   
   
   
    std::swap(nums[i], nums[q - 1]);
    
    
    
    
    
    return i; 
}


void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
     // 请在这里完成你的代码
     if (l < r) {  
        int pivot_index = partition(nums, l, r); 
        quick_sort(nums, l, pivot_index - 1);  
        



        
        
        quick_sort(nums, pivot_index + 1, r);  
    }
}



void QuickSort::mysort(std::vector<int>& nums) {
    
    
    if (nums.size() == 0) 
        return;
    quick_sort(nums, 0, nums.size() - 1);
}