#include "QuickSort.h"
#include <utility>
#include <cstdlib>

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int random_idx = p + rand() % (q - p + 1);
    std::swap(nums[p], nums[random_idx]);
    int pivot = nums[p];
    int i = p;

    for (int j = p + 1; j <= q; ++j) {
        if (nums[j] < pivot) {
            ++i;
            if (i != j) {
                std::swap(nums[i], nums[j]);
            }
        }
    }

    std::swap(nums[p], nums[i]);
    return i;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    while (l < r) {
        int m = partition(nums, l, r);
        if (m - l < r - m) {
            quick_sort(nums, l, m - 1);
            l = m + 1;
        } else {
            quick_sort(nums, m + 1, r);
            r = m - 1;
        }
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if (!nums.empty()) {
        quick_sort(nums, 0, nums.size() - 1);
    }
}