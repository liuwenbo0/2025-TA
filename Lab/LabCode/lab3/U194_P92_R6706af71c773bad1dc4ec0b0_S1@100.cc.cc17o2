#include <iostream>
#include <vector>
#include <deque>

using namespace std;

void slidingWindowMax(int n, int k, const vector<int>& nums) {
    deque<int> dq; // Deque to store indices of useful elements for current window
    vector<int> result; // Resultant array to store maximums

    for (int i = 0; i < n; ++i) {
        // Remove elements not within the window
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // Maintain decreasing order in Deque
        while (!dq.empty() && nums[dq.back()] <= nums[i]) {
            dq.pop_back();
        }

        // Add current element's index to the deque
        dq.push_back(i);

        // The first element in the deque is the maximum for the current window
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }

    // Output the results
    for (int max_value : result) {
        cout << max_value << " ";
    }
    cout << endl;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> nums(n);
    
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    slidingWindowMax(n, k, nums);
    
    return 0;
}