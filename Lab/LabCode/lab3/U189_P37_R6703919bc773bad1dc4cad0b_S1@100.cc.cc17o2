#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest = i; // 初始化最大值为根节点
    int left = 2 * i; // 左子节点
    int right = 2 * i + 1; // 右子节点

    // 如果左子节点存在且大于根节点
    if (left <= length && nums[left] > nums[largest]) {
        largest = left;
    }

    // 如果右子节点存在且大于当前最大值
    if (right <= length && nums[right] > nums[largest]) {
        largest = right;
    }

    // 如果最大值不是根节点
    if (largest != i) {
        std::swap(nums[i], nums[largest]); // 交换
        max_heapify(nums, largest); // 递归调用
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    length = nums.size() - 1; // 因为我们在开头插入了0，所以真实大小是size-1
    for (int i = length / 2; i >= 1; --i) {
        max_heapify(nums, i);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums); // 构建最大堆

    // 排序过程
    for (int i = length; i >= 2; --i) {
        std::swap(nums[1], nums[i]); // 将当前最大的元素放到数组末尾
        length--; // 减小堆的大小
        max_heapify(nums, 1); // 调整堆
    }

    nums.erase(nums.begin()); // 删除开头元素
}