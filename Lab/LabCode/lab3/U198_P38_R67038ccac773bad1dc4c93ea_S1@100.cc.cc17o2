#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int mid=(p+q+1)/2;
    int swap=nums[mid];
    nums[mid]=nums[p];
    nums[p]=swap;
    int j = p;
    for (int i=p+1; i <= q;i++)
    {
        if (nums[i] <= nums[p])
        {
            j++;
            int x = nums[i];
            nums[i] = nums[j];
            nums[j] = x;
        }
    }
    int x = nums[p];
    nums[p] = nums[j];
    nums[j] = x;
    return j;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if (l < r)
    {
        int mid = partition(nums, l, r);
        quick_sort(nums, l, mid-1);
        quick_sort(nums, mid + 1, r);
    }

}
void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.size() == 0)
        return;
    quick_sort(nums, 0, nums.size() - 1);
}