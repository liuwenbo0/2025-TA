#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l,r;
    l=2*i;
    r=2*i+1;
    int largest;
    if(l<=heap_size&&nums[l]>nums[i]){
        largest=l;
    }
    else{
        largest=i;
    }
    if(r<=heap_size&&nums[r]>nums[largest]){
        largest=r;
    }
    if(largest!=i){
        swap(nums[i],nums[largest]);
        max_heapify(nums, largest);
    }


}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    int len=nums.size()-1;
    int i;
    for(i=len/2;i>=1;i--){
        max_heapify(nums, i);
    }

}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
     heap_size = length;
    build_max_heap(nums);
    int i;
    for(i=length;i>=2;i--){
        swap(nums[1],nums[i]);
        heap_size=heap_size-1;
        max_heapify(nums, 1);
    }

    nums.erase(nums.begin()); // 删除开头元素
}