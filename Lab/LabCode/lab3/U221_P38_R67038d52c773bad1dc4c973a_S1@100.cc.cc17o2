#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    // 请在这里完成你的代码
    // 当序列接近有序时，时间复杂度会较高，三数取中法选基准
    int mid = p + (q - p) / 2;
    if (nums[p] > nums[mid]) std::swap(nums[p], nums[mid]);
    if (nums[p] > nums[q]) std::swap(nums[p], nums[q]);
    if (nums[mid] > nums[q]) std::swap(nums[mid], nums[q]);
    std::swap(nums[mid], nums[q]);


    int pivot = nums[q]; // 选择最后一个元素作为基准
    int i = p - 1;

    for (int j = p; j < q; ++j){
        if (nums[j] <= pivot){
            ++i;
            std::swap(nums[i], nums[j]); // 小于pivot的元素放到左侧
        }
    }

    std::swap(nums[i + 1], nums[q]); // pivot移动
    return i + 1;

    return 0;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    // 请在这里完成你的代码
    if (l < r){
        int pivot_index = partition(nums, l, r); //pivot的位置索引
        quick_sort(nums, l, pivot_index - 1);// 递归排序pivot左侧的
        quick_sort(nums, pivot_index + 1, r);// 递归排序pivot右侧的

    }

}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}