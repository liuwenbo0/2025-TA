#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    swap(nums[p],nums[rand()%(q-p+1)+p]);
    int pivot=nums[p];
    int i=p;
    for (int j=p+1;j<=q;j++){
       if (nums[j]<pivot){
         i++;
         swap(nums[i],nums[j]);}}
    swap(nums[i],nums[p]);
    return i;
    return 0;

}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if(l<r){
      int m=partition(nums,l,r);
      quick_sort(nums,l,m-1);
      quick_sort(nums,m+1,r);}

}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}