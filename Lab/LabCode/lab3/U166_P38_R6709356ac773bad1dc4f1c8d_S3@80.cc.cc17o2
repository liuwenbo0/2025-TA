#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int pivot = nums[q];
    int i = p - 1;

    for (int j = p; j < q; j++) {
        if (nums[j] <= pivot) {
            i++;
            std::swap(nums[i], nums[j]);
        }
    }
    std::swap(nums[i + 1], nums[q]);
    return i + 1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if (l < r) {
        int pivot_index = partition(nums, l, r);
        quick_sort(nums, l, pivot_index - 1);
        quick_sort(nums, pivot_index + 1, r);
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.size() == 0) 
        return;
    quick_sort(nums, 0, nums.size() - 1);
}