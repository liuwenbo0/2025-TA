#include <iostream>
#include <deque>
#include <vector>

using namespace std;

vector<int> maxInWindows(const vector<int>& num, int k) {
    vector<int> result;
    deque<int> dq; // 双端队列，用于存储可能成为最大值的元素的索引

    for (int i = 0; i < num.size(); ++i) {
        // 移除不在当前窗口范围内的元素
        while (!dq.empty() && dq.front() < i - k + 1) {
            dq.pop_front();
        }

        // 移除所有小于当前元素的值，因为它们不可能成为最大值
        while (!dq.empty() && num[dq.back()] < num[i]) {
            dq.pop_back();
        }

        // 将当前元素的索引添加到队列中
        dq.push_back(i);

        // 当窗口完全进入数组时，队列首部的元素就是窗口的最大值
        if (i >= k - 1) {
            result.push_back(num[dq.front()]);
        }
    }

    return result;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    vector<int> maxValues = maxInWindows(nums, k);
    for (int i = 0; i < maxValues.size(); ++i) {
        cout << maxValues[i];
        if (i < maxValues.size() - 1) cout << " ";
    }
    cout << endl;

    return 0;
}