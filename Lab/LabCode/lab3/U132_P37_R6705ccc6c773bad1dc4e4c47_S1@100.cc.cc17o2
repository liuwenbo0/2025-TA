#include "HeapSort.h"
#include <climits>

//递归升数
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int l, r;//建立左右子节点l和r
    int largest = i;//假设本节点最大
    l = 2 * i;//赋值
    r = 2 * i + 1;
    //判断左右子节点，赋值largest
    if (l <= heap_size && nums[l] > nums[i]) {
        largest = l;
    }
    if (r <= heap_size && nums[r] > nums[largest]) {
        largest = r;
    }
    //交换
    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);//递归，使得某一大数上升
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {//遍历建最大堆
    for (int i = nums.size() / 2; i >= 1; i--) {
        max_heapify(nums, i);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    int length = nums.size();//
    heap_size = length;//
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums);

    for (int i = length; i >= 2; i--) {
        std::swap(nums[1], nums[i]); // 取出最大数放在锥顶
        heap_size = heap_size - 1;//调整heap_size
        max_heapify(nums, 1); // 维持最大堆性质
    }


    nums.erase(nums.begin()); // 删除开头元素
}