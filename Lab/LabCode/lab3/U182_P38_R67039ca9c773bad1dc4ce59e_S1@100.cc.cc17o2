#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    // 随机选择一个元素作为基准
    int pivot = nums[p];
    int i = p;
    int j = q;
    while (i < j) {
        // 从右向左找第一个小于基准的元素
        while (i < j && nums[j] >= pivot) {
            j--;
        }
        // 从左向右找第一个大于基准的元素
        while (i < j && nums[i] <= pivot) {
            i++;
        }
        if (i < j) {
            swap(nums[i], nums[j]);
        }
    }
    // 将基准元素放到中间
    swap(nums[i], nums[p]);
    return i;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if (l < r) {
        // 找到基准元素的正确位置
        int m = partition(nums, l, r);

        quick_sort(nums, l, m - 1);
        quick_sort(nums, m + 1, r);
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
        return;
    quick_sort(nums, 0, nums.size() - 1);
}