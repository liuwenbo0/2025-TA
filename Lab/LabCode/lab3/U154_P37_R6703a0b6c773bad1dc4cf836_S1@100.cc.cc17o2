#include "HeapSort.h"
#include <vector>
#include <utility>
int length = 0;

void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left = 2 * i;
    int right = 2 * i + 1;
    int largest = i;

    if (left <= length) {
        if (nums[left] > nums[i]) {
            largest = left;
        }
    }
    
    if (right <= length && nums[right] > nums[largest]) {
        largest = right;
    }

    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        max_heapify(nums, largest);  
    }
}

void HeapSort::build_max_heap(std::vector<int>& nums) {
    for (int i = length / 2; i >= 1; --i) {
        max_heapify(nums, i);
    }
}

void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();

    nums.insert(nums.begin(), 0);  

    build_max_heap(nums);

    while (length > 1) {
        std::swap(nums[1], nums[length]);  
        --length;
        max_heapify(nums, 1);  
    }

    nums.erase(nums.begin());  
}