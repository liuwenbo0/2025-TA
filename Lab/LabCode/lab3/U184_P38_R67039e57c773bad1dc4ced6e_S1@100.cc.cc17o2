#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int pivot= nums[p];
    int i = p,j = q;
    while (i < j){
        while(i < j && nums[j] >= pivot) {
        j--;
        }
        while (i < j && nums[i] <= pivot) {
            i++;
        }
        if (i < j) {
            swap(nums[i], nums[j]);
        }
    }    
    swap(nums[i], nums[p]);
    return i;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if(l<r){
        int pivot = partition(nums,l,r);
        quick_sort(nums,l,pivot-1);
        quick_sort(nums,pivot+1,r);
    }
}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}