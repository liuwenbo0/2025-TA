#include <iostream>  
#include <vector>  

using namespace std;  

  
void max_heapify(vector<int>& nums, int n, int i) {  
    int largest = i;        
    int left = 2 * i + 1;     
    int right = 2 * i + 2; 

  
    if (left < n &&  nums[left] >  nums[largest]) {  
        largest = left;  
    }  

    if (right < n &&  nums[right] > nums[largest]) {  
        largest = right;  
    }  
  
    if (largest != i) {  
        swap( nums[i],  nums[largest]);  
        max_heapify( nums, n, largest);  
    }  
}  


void build_max_heap(vector<int>& nums) {  
    int n = nums.size();  

    for (int i = n / 2 - 1; i >= 0; i--) {  
        max_heapify(nums, n, i);  
    }  

    
    for (int i = n - 1; i > 0; i--) {  
        swap(nums[0],nums[i]);  
        max_heapify(nums, i, 0);     
    }  
}  

int main() {  
    int n;
    std::cin >> n;
    std::vector<int> nums(n); 

    for (int i = 0; i < n; ++i) 
    {
        std::cin >> nums[i];
    }
 
    build_max_heap(nums);  

    for (int val : nums)
    {  
        cout << val << " ";  
    }  
    cout << endl;  

    return 0;  
}