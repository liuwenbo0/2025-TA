#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int left=2*i;
    int right=2*i+1;
    int largest;
    if(left<=length && nums[left]>nums[i])
    {
        largest=left;
        }
    else largest=i;
    if(right<=length && nums[right]>nums[largest])
    {
        largest=right;
    }
    if(largest!=i)
    {
        int temp;
        temp=nums[i];
        nums[i]=nums[largest];
        nums[largest]=temp;
        max_heapify(nums, largest);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    int len=nums.size();
    for(int i=len/2;i>0;i--)
    {
        max_heapify(nums,i);
    }
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    //heap_size=nums.size();
    build_max_heap(nums);
    for(int i=length;i>1;i--)
    {
        int temp;
        temp=nums[i];
        nums[i]=nums[1];
        nums[1]=temp;
        length=length-1;
        max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}