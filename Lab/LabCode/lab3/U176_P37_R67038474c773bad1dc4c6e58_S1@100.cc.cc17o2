#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int par = i;
    int left = 2 * i;
    int right = 2 * i + 1;

    if (left <= heap_size && nums[left] > nums[par]) {
      par = left;
    }

    if (right <= heap_size && nums[right] > nums[par]) {
      par = right;
    }

    if (par != i) {
      std::swap(nums[i], nums[par]);
      max_heapify(nums, par);
    }

}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = length;
    for (int i = length / 2; i >= 1; --i) {
      max_heapify(nums, i);
    }
}
void HeapSort::mysort(std::vector<int>& nums) {
   length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    build_max_heap(nums);

    for (int i = length; i >= 2; --i) {
      std::swap(nums[1], nums[i]);
      heap_size--;
      max_heapify(nums, 1);
    }

    nums.erase(nums.begin()); // 删除开头元素
}