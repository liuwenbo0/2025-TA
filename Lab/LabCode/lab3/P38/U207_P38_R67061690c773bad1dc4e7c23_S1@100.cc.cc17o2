#include "QuickSort.h"
#include <iostream>
#include <ctime>
#include <cstdlib>

int QuickSort::partition(std::vector<int>& nums, int p, int q) 
{
    srand(time(nullptr));
    int randomIndex = p + rand() % (q - p + 1);
    std::swap(nums[randomIndex], nums[q]);
    int pivot = nums[q];
    int i = p - 1;
    int j=p;
    while ( j < q) 
    {
        if (nums[j] <= pivot) 
        {
            i++;
            std::swap(nums[i], nums[j]);
        }
        j++;
    }
    std::swap(nums[i + 1], nums[q]);
    return i + 1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) 
{
    if (l < r) 
    {
        if (r - l + 1 < 10) 
        {
            int i=l+1;
            while ( i <= r) 
            {
                int key = nums[i];
                int j = i - 1;
                while (j >= l && nums[j] > key) 
                {
                    nums[j + 1] = nums[j];
                    j--;
                }
                nums[j + 1] = key;
                i++;
            }
            return;
        }
        int pivotIndex = partition(nums, l, r);
        quick_sort(nums, l, pivotIndex - 1);
        quick_sort(nums, pivotIndex + 1, r);
    }
}

void QuickSort::mysort(std::vector<int>& nums) 
{
    if (nums.size() == 0) 
    return;
    quick_sort(nums, 0, nums.size() - 1);
}