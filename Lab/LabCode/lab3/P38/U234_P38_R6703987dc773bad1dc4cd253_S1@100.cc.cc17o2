#include "QuickSort.h"
#include<random>
default_random_engine e{random_device{}()};
int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    uniform_int_distribution<int> dis(p,q);
    int temp,i=p-1,k;
    k=dis(e);
    temp=nums[k];
    nums[k]=nums[q];
    nums[q]=temp;
    int x=nums[q];
    for(int j=p;j<q;j++){
        if(nums[j]<=x){
            i++;
            temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
        }
    }
    temp=nums[i+1];
    nums[i+1]=nums[q];
    nums[q]=temp;
    return i+1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    int m;
    if(l<r){
        m=partition(nums,l,r);
        quick_sort(nums,l,m-1);
        quick_sort(nums,m+1,r);
    }
}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}