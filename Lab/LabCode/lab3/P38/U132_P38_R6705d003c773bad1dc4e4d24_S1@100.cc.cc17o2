#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int x = nums[p];//以头为标杆
     while (p < q) {
        while (p < q && nums[q] >= x) {//大数降位
            q--;
        }
        nums[p] = nums[q];
        while (p < q && nums[p] <= x) {//小数升位
            p++;
        }
        nums[q] = nums[p];
    }//排序
    nums[p] = x;//排标杆

    return p;
}

//分治
void QuickSort::quick_sort(std::vector<int>& nums, int left, int right) {
     if (left < right) {
        int q = partition(nums, left, right);

            quick_sort(nums, left, q - 1);

            quick_sort(nums, q + 1, right);
    }

}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) //如果数组为空则返回
      return;
    quick_sort(nums, 0, nums.size() - 1);//快排
}