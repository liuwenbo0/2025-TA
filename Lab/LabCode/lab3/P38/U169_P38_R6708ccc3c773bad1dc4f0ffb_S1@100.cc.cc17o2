#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) 
{  
    int a = p + (q - p) / 2;     
    int pi = (nums[p] < nums[a]) ? ((nums[a] < nums[q]) ? a : (nums[p] < nums[q] ? q : p))  
                                          : ((nums[p] < nums[q]) ? p : (nums[a] < nums[q] ? q : a));  
    std::swap(nums[pi], nums[q]); 
    int c = nums[q];  
    int i = p - 1;  
    for(int j = p; j < q; ++j) 
    {  
        if (nums[j] <= c)
        {  
            ++i;  
            std::swap(nums[i], nums[j]);  
        }  
    }  
    std::swap(nums[i + 1], nums[q]);  
    return i + 1;  
}  

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r)
{
    if(r>l)
   {
    int b=partition(nums,l,r);
    quick_sort(nums, l, b-1);
    quick_sort(nums, b+1,r);
   }

}

void QuickSort::mysort(std::vector<int>& nums) 
{
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}