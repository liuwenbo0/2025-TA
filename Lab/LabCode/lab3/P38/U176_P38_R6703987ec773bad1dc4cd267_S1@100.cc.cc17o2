#include "QuickSort.h"

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    auto randint = [](int l, int r) -> int {
        return rand() % (r - l + 1) + l;
    };

    if (l >= r) {
        return;
    }
    int num = randint(l, r), ind1 = 0, ind2 = 0, ind3 = 0;
    std::vector<int> b(r - l + 1), c(r - l + 1), d(r - l + 1);
    for (int i = l; i <= r; i++) {
        if (nums[i] < nums[num]) {
            b[ind1++] = nums[i];
        } else if (nums[i] == nums[num]) {
            c[ind2++] = nums[i];
        } else {
            d[ind3++] = nums[i];
        }
    }
    for (int i = 0; i < ind1; i++) {
        nums[i + l] = b[i];
    }
    for (int i = 0; i < ind2; i++) {
        nums[i + ind1 + l] = c[i];
    }
    for (int i = 0; i < ind3; i++) {
        nums[i + ind1 + ind2 + l] = d[i];
    }
    quick_sort(nums, l, l + ind1 - 1);
    quick_sort(nums, l + ind1 + ind2, r);

}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}