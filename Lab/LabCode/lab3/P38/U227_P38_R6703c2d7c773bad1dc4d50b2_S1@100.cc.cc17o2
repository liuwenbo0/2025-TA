#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int key=nums[(p+q)/2];
    int cc=nums[q];
        nums[q]=nums[(p+q)/2];
        nums[(p+q)/2]=cc;
    int i=p-1;
    for(int j=p;j<q;j++)
    {
        if(nums[j]<=key)
        {
            i=i+1;
            int temp;
            temp=nums[j];
            nums[j]=nums[i];
            nums[i]=temp;
        }
    }
    int temp=nums[q];
        nums[q]=nums[i+1];
        nums[i+1]=temp;
    return i+1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if(l<r)
    {
        int q=partition(nums,l,r);
        quick_sort(nums,l,q-1);
        quick_sort(nums,q+1,r);
    }
}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}