#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    
    int center = p + (q - p) / 2;
    if (nums[p] > nums[center]) std::swap(nums[p], nums[center]);
    if (nums[p] > nums[q]) std::swap(nums[p], nums[q]);
    if (nums[center] > nums[q]) std::swap(nums[center], nums[q]);
    
    
    std::swap(nums[center], nums[q - 1]);
    int pivot = nums[q - 1]; 
    int i = p; 

    for (int j = p; j < q; j++) {
        if (nums[j] < pivot) { 
            std::swap(nums[i], nums[j]); 
            i++;
        }
    }
    std::swap(nums[i], nums[q - 1]);
    return i; 
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if (r - l <= 10) {
        for (int i = l + 1; i <= r; i++) {
            int key = nums[i];
            int j = i - 1;
            while (j >= l && nums[j] > key) {
                nums[j + 1] = nums[j];
                j--;
            }
            nums[j + 1] = key;
        }
        return;
    }

    if (l < r) { 
        int pivotIndex = partition(nums, l, r); 
        quick_sort(nums, l, pivotIndex - 1);
        quick_sort(nums, pivotIndex + 1, r); 
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.empty())
        return;
    quick_sort(nums, 0, nums.size() - 1);
}