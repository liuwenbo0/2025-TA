#include "QuickSort.h"
#include <cstdlib>
#include <algorithm>

int QuickSort::partition(std::vector<int>& nums, int left, int right) {
    if (left + 1 >= right) return left;

    int pivotIndex = left + rand() % (right - left);
    swap(nums[right], nums[pivotIndex]);

    int pivot = nums[right];
    int i = left;
    for (int j = left; j < right; ++j) {
        if (nums[j] < pivot) {
            swap(nums[i], nums[j]);
            i++;
        }
    }
    swap(nums[i], nums[right]);
    return i;
}

void QuickSort::quick_sort(std::vector<int>& nums, int begin, int end) {
    if (begin >= end) return;

    if (end - begin > 10) {
        int partitionIndex = partition(nums, begin, end);
        quick_sort(nums, begin, partitionIndex - 1);
        quick_sort(nums, partitionIndex + 1, end);
    } else {
        for (int i = begin + 1; i <= end; i++) {
            int key = nums[i];
            int j = i - 1;
            while (j >= begin && nums[j] > key) {
                nums[j + 1] = nums[j];
                j--;
            }
            nums[j + 1] = key;
        }
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.size() == 0)
        return;
    quick_sort(nums, 0, nums.size() - 1);
}