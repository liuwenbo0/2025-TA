#include "QuickSort.h"
#include <cstdlib> 
#include <ctime>
int QuickSort::partition(std::vector<int>& nums, int p, int q) 
{
    // 选择区间[q]上的最后一个元素作为pivot（基准）
    int x=q-rand()%(q-p+1);
    std::swap(nums[q], nums[x]);
    int pivot = nums[q];
    int i = p - 1; // i是小于pivot的元素的索引
    for (int j = p; j < q; j++) 
    {
        // 遍历从p到q-1的元素，如果当前元素小于pivot，就交换
        if (nums[j] < pivot) 
        {
            i++;
            std::swap(nums[i], nums[j]);
        }
    }
    // 将基准元素放到中间位置
    std::swap(nums[i + 1], nums[q]);
    // 返回基准元素的索引
    return i + 1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    // 对于区间[l, r]，进行快速排序
    if (l < r) {
        // 调用partition函数获取基准元素的索引
        int pi = partition(nums, l, r);
        // 对基准元素左边的元素进行快速排序
        quick_sort(nums, l, pi - 1);
        // 对基准元素右边的元素进行快速排序
        quick_sort(nums, pi + 1, r);
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 1) 
    return;
    srand(static_cast<unsigned int>(time(0)));
    quick_sort(nums, 0, nums.size() - 1);
      
}