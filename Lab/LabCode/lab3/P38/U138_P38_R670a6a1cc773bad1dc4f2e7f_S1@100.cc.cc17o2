#include <iostream>
#include <vector>
#include <algorithm>

class QuickSort {
public:
    void mysort(std::vector<int>& nums);
private:
    void quick_sort(std::vector<int>& nums, int low, int high);
    int partition(std::vector<int>& nums, int low, int high);
    int median_of_three(std::vector<int>& nums, int low, int high);
    void insertion_sort(std::vector<int>& nums, int low, int high);
};

void QuickSort::mysort(std::vector<int>& nums) {
    if (!nums.empty()) {
        quick_sort(nums, 0, nums.size() - 1);
    }
}

void QuickSort::quick_sort(std::vector<int>& nums, int low, int high) {
    if (high - low < 10) {
        insertion_sort(nums, low, high);
        return;
    }

    int pivot_index = median_of_three(nums, low, high);
    std::swap(nums[pivot_index], nums[high]);

    int partition_index = partition(nums, low, high);
    quick_sort(nums, low, partition_index - 1);
    quick_sort(nums, partition_index + 1, high);
}

int QuickSort::partition(std::vector<int>& nums, int low, int high) {
    int pivot = nums[high];
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        if (nums[j] <= pivot) {
            i++;
            std::swap(nums[i], nums[j]);
        }
    }
    std::swap(nums[i + 1], nums[high]);
    return i + 1;
}

int QuickSort::median_of_three(std::vector<int>& nums, int low, int high) {
    int mid = low + (high - low) / 2;
    if (nums[low] > nums[mid]) std::swap(nums[low], nums[mid]);
    if (nums[low] > nums[high]) std::swap(nums[low], nums[high]);
    if (nums[mid] > nums[high]) std::swap(nums[mid], nums[high]);
    return mid;
}

void QuickSort::insertion_sort(std::vector<int>& nums, int low, int high) {
    for (int i = low + 1; i <= high; ++i) {
        int key = nums[i];
        int j = i - 1;
        while (j >= low && nums[j] > key) {
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = key;
    }
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i];
    }
    QuickSort sorter;
    sorter.mysort(nums);
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}