#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest=i;
    if(nums[i]<nums[2*i]&&(2*i)<=heap_size)
    {
        largest=2*i;
    }
    if(nums[largest]<nums[2*i+1]&&(2*i+1)<=heap_size)
    {
        largest=2*i+1;
    }
    if(largest!=i)
    {
        swap(nums[i],nums[largest]);
       HeapSort::max_heapify(nums, largest);
    }
}
void HeapSort::build_max_heap(std::vector<int>& nums) {
    for(int i=length/2;i>=1;i--)
    {
    HeapSort::max_heapify(nums, i);
    }
}
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    heap_size=length;//6
    HeapSort::build_max_heap(nums);
    while(heap_size>1)
    {
    swap(nums[1],nums[heap_size]);
    heap_size--;
    HeapSort::max_heapify(nums,1);
    }
    nums.erase(nums.begin()); // 删除开头元素
}