#include "HeapSort.h"
void HeapSort::max_heapify(std::vector<int>& nums, int i) 
{
    // 请在这里完成你的代码
    int largest;
    int t;
    if(2*i<=heap_size && nums[2*i]>nums[i])
    {
      largest = 2*i;
    }
    else
    {
      largest = i;
    }
    if(2*i+1<=heap_size && nums[2*i+1]>nums[largest])
    {
      largest = 2*i+1;
    }
    if(largest != i)
    {
      t=nums[i];
      nums[i]=nums[largest];
      nums[largest]=t;
      max_heapify(nums,largest);
    }

}
void HeapSort::build_max_heap(std::vector<int>& nums) 
{
    // 请在这里完成你的代码
    heap_size = length;
    for(int i=length/2 ;i>0;i--)
    {
      max_heapify(nums,i);
    }

}
void HeapSort::mysort(std::vector<int>& nums)
{
    length = nums.size();
    nums.insert(nums.begin(), 0); // 在开头插入一个元素，使得待排序元素下标从 1 开始
    // 请在这里完成你的代码
    build_max_heap(nums);
    int k;
    for(int i=length;i>1;i--)
    {
      k=nums[1];
      nums[1]=nums[i];
      nums[i]=k;
      heap_size--;
      max_heapify(nums,1);
    }

    nums.erase(nums.begin()); // 删除开头元素
}