#include "ThreeWayQuickSort.h"

void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int q) {
    if (p >= q) {
        return;
    }
    int pivotIndex = p + rand() % (q - p + 1);
    std::swap(nums[pivotIndex], nums[p]);
    int pivot = nums[p];
    int i = p + 1;
    int lt = p;
    int gt = q;
    while (i <= gt) {
        if (nums[i] < pivot) {
            std::swap(nums[i++], nums[lt++]);
        } else if (nums[i] > pivot) {
            std::swap(nums[i], nums[gt--]);
        } else {
            i++;
        }
    }
    three_way_quick_sort(nums, p, lt - 1);
    three_way_quick_sort(nums, gt + 1, q);
}

void ThreeWayQuickSort::mysort(std::vector<int>& nums) {
    if (nums.empty()) {
        return;
    }
    srand(static_cast<unsigned int>(time(nullptr)));
    three_way_quick_sort(nums, 0, nums.size() - 1);
}