#include <iostream>
#include <vector>
#include <deque>

std::vector<int> max_in_sliding_window(const std::vector<int>& nums, int k) {
    std::deque<int> dq;
    std::vector<int> result;

    for (int i = 0; i < nums.size(); ++i) {
        // 移除不在窗口范围内的元素
        if (!dq.empty() && dq.front() == i - k) {
            dq.pop_front();
        }

        // 移除所有比当前元素小的元素
        while (!dq.empty() && nums[dq.back()] < nums[i]) {
            dq.pop_back();
        }

        // 将当前元素添加到双端队列
        dq.push_back(i);

        // 当窗口大小达到 k 时，记录当前窗口的最大值
        if (i >= k - 1) {
            result.push_back(nums[dq.front()]);
        }
    }

    return result;
}

int main() {
    int n, k;
    std::cin >> n >> k;
    std::vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i];
    }

    std::vector<int> result = max_in_sliding_window(nums, k);
    for (int i = 0; i < result.size(); ++i) {
        if (i > 0) {
            std::cout << " ";
        }
        std::cout << result[i];
    }
    std::cout << std::endl;

    return 0;
}