#include "ThreeWayQuickSort.h"

void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int q) {
    // 如果区间长度小于等于 2，直接使用插入排序或不做任何操作
    if (q - p <= 1) {
        return;
    }
    
    // 选择区间的三个代表性元素：第一个，中间的，和最后一个
    int pivot1 = nums[p], pivot2 = nums[(p + q) / 2], pivot3 = nums[q];
    int median = pivot1 < pivot2 ? (pivot2 < pivot3 ? pivot2 : pivot1 < pivot3 ? pivot1 : pivot3) : (pivot2 > pivot3 ? pivot2 : pivot1 > pivot3 ? pivot1 : pivot3);

    // 三路分区
    int i = p, j = p, k = q;
    while (j <= k) {
        if (nums[j] < median) {
            std::swap(nums[i], nums[j]);
            i++;
            j++;
        } else if (nums[j] > median) {
            std::swap(nums[j], nums[k]);
            k--;
        } else {
            j++;
        }
    }
    
    // 递归地对小于、等于、大于基准值的子区间进行快速排序
    three_way_quick_sort(nums, p, i - 1);
    three_way_quick_sort(nums, i, k);
    three_way_quick_sort(nums, k + 1, q);
}

void ThreeWayQuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    three_way_quick_sort(nums, 0, nums.size() - 1);
}