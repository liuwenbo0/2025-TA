#include <iostream>
#include <vector>

class HeapSorter {
public:
    void sort(std::vector<int>& numbers);
private:
    void heapify(std::vector<int>& numbers, int index, int heapSize);
    void buildHeap(std::vector<int>& numbers);
};

void HeapSorter::heapify(std::vector<int>& numbers, int index, int heapSize) {
    int largest = index;
    int leftChild = 2 * index + 1;
    int rightChild = 2 * index + 2;

    if (leftChild < heapSize && numbers[leftChild] > numbers[largest]) {
        largest = leftChild;
    }

    if (rightChild < heapSize && numbers[rightChild] > numbers[largest]) {
        largest = rightChild;
    }

    if (largest!= index) {
        std::swap(numbers[index], numbers[largest]);
        heapify(numbers, largest, heapSize);
    }
}

void HeapSorter::buildHeap(std::vector<int>& numbers) {
    int size = numbers.size();
    for (int i = size / 2 - 1; i >= 0; --i) {
        heapify(numbers, i, size);
    }
}

void HeapSorter::sort(std::vector<int>& numbers) {
    buildHeap(numbers);
    int size = numbers.size();

    for (int i = size - 1; i > 0; --i) {
        std::swap(numbers[0], numbers[i]);
        heapify(numbers, 0, i);
    }
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> inputNumbers(n);

    for (int i = 0; i < n; ++i) {
        std::cin >> inputNumbers[i];
    }

    HeapSorter sorter;
    sorter.sort(inputNumbers);

    for (const int& num : inputNumbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}