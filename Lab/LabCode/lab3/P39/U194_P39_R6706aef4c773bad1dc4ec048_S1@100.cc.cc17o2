#include "ThreeWayQuickSort.h"

void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int q) {
        if (p >= q) return; // 如果区间无效，直接返回
        int random_index = p + rand() % (q - p + 1);
        std::swap(nums[p], nums[random_index]); // 将随机选中的元素放到起始位置


        int key = nums[p]; // 选择第一个元素作为基准
        int lt = p;        // 小于区间的指针
        int gt = q;        // 大于区间的指针
        int i = p + 1;     // 当前元素的指针

    while (i <= gt) {
        if (nums[i] < key) {
            std::swap(nums[lt++], nums[i++]); // 将小于基准的元素放到左边，并更新指针
        } else if (nums[i] > key) {
            std::swap(nums[i], nums[gt--]); // 将大于基准的元素放到右边，并更新指针
        } else {
            i++; // 等于基准的元素，直接跳过
        }
    }

    // 递归排序小于和大于基准的两个部分
    three_way_quick_sort(nums, p, lt - 1);
    three_way_quick_sort(nums, gt + 1, q);
}

void ThreeWayQuickSort::mysort(std::vector<int>& nums) {
    if (nums.empty()) return; // 使用empty()判断是否为空
    three_way_quick_sort(nums, 0, nums.size() - 1);
}