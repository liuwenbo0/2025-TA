#include "ThreeWayQuickSort.h"  
  
// 辅助函数，用于交换数组中的两个元素  
void swap(std::vector<int>& nums, int i, int j) {  
    int temp = nums[i];  
    nums[i] = nums[j];  
    nums[j] = temp;  
}  
  
void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int q) {  
    if (p >= q) return;  
  
    // 选择最左边的元素作为基准值  
    int pivot = nums[p];  
    // 定义三个指针  
    int lt = p;    // 指向小于基准值的区域的下一个位置  
    int i = p + 1; // 当前考察的元素  
    int gt = q;    // 指向大于基准值的区域的前一个位置  
  
    while (i <= gt) {  
        if (nums[i] < pivot) {  
            swap(nums, lt, i);  
            lt++;  
            i++;  
        } 
        else if (nums[i] > pivot) {  
            swap(nums, i, gt);  
            gt--;  
        } 
        else {  
            // nums[i] == pivot  
            i++;  
        }  
    }  
  
    // 递归地对小于基准值和大于基准值的区域进行排序  
    three_way_quick_sort(nums, p, lt - 1);  
    three_way_quick_sort(nums, gt + 1, q);  
}  
  
void ThreeWayQuickSort::mysort(std::vector<int>& nums) {  
    if (nums.size() == 0)   
        return;  
    three_way_quick_sort(nums, 0, nums.size() - 1);  
}