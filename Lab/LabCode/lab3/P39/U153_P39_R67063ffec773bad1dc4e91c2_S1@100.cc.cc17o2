#include "ThreeWayQuickSort.h"

void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int r) {
    if (p >= r) return; // 递归终止条件

    // 随机选择一个元素作为基准值，并与最后一个元素交换，以避免最坏情况性能
    swap(nums[p + (rand() % (r - p + 1))], nums[r]);

    int x = nums[r]; // 基准值
    int i = p - 1; // nums[p..i] < x
    int j = p; // nums[i+1..j-1] == x
    int k = r + 1; // nums[k..r] > x

    while (j < k) {
        if (nums[j] < x) {
            i++; // 将小于x的元素移动到左边
            swap(nums[i], nums[j]);
            j++;
        } else if (nums[j] == x) {
            j++; // 跳过等于x的元素
        } else { // nums[j] > x
            k--; // 将大于x的元素移动到右边
            swap(nums[j], nums[k]);
        }
    }

    // 递归地对小于和大于基准值的部分进行排序
    three_way_quick_sort(nums, p, i);
    three_way_quick_sort(nums, k, r);
}

void ThreeWayQuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
        return;
    three_way_quick_sort(nums, 0, nums.size() - 1);
}