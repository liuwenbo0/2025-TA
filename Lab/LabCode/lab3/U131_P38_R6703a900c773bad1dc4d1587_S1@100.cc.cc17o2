#include <iostream>
#include <vector>

class HeapSort {
public:
    void sort(std::vector<int>& nums);
private:
    void maxHeapify(std::vector<int>& nums, int i, int heapSize);
    void buildMaxHeap(std::vector<int>& nums);
};

void HeapSort::maxHeapify(std::vector<int>& nums, int i, int heapSize) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2; 
    if (left < heapSize && nums[left] > nums[largest]) {
        largest = left;
    }
    if (right < heapSize && nums[right] > nums[largest]) {
        largest = right;
    }
    if (largest != i) {
        std::swap(nums[i], nums[largest]);
        maxHeapify(nums, largest, heapSize);
    }
}
void HeapSort::buildMaxHeap(std::vector<int>& nums) {
    int heapSize = nums.size();
    for (int i = heapSize / 2 - 1; i >= 0; --i) {
        maxHeapify(nums, i, heapSize); 
    }
}
void HeapSort::sort(std::vector<int>& nums) {
    buildMaxHeap(nums); 
    int heapSize = nums.size();
    for (int i = heapSize - 1; i > 0; --i) {
        std::swap(nums[0], nums[i]);
        maxHeapify(nums, 0, i); 
    }
}
int main() {
    int n;
    std::cin >> n;
    std::vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i];
    }
    HeapSort hs;
    hs.sort(nums);
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}