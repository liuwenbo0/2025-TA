#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <climits>
#include <numeric>

using namespace std;

int minCutsToEqualHeight(int n, int q, const vector<int>& heights) {
    unordered_map<int, vector<int>> heightMap;

    for (int height : heights) {
        int currentHeight = height;
        int cuts = 0;
        while (currentHeight > 0) {
            heightMap[currentHeight].emplace_back(cuts);
            currentHeight /= 2;
            cuts++;
        }
    }

    int minCuts = INT_MAX;
    for (const auto& entry : heightMap) {
        const vector<int>& cutList = entry.second;
        if (cutList.size() >= static_cast<size_t>(q)) {

            vector<int> sortedCuts = cutList; 
            sort(sortedCuts.begin(), sortedCuts.end());

            int totalCuts = accumulate(sortedCuts.begin(), sortedCuts.begin() + q, 0);
            minCuts = min(minCuts, totalCuts);
        }
    }

    return (minCuts == INT_MAX) ? 0 : minCuts;
}

int main() {
    int n, q;
    cin >> n >> q;
    vector<int> heights(n);
    for (int& height : heights) {
        cin >> height;
    }

    cout << minCutsToEqualHeight(n, q, heights) << endl;

    return 0;
}