#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    // 请在这里完成你的代码
     int pivot = nums[p]; // 选择基准值
    int i = p, j = q;
    while (i < j) {
        // 从右向左找第一个小于pivot的数
        while (i < j && nums[j] >= pivot) {
            j--;
        }
        if (i < j) {
            nums[i++] = nums[j]; // 将小于pivot的数移动到左边
        }
        // 从左向右找第一个大于pivot的数
        while (i < j && nums[i] <= pivot) {
            i++;
        }
        if (i < j) {
            nums[j--] = nums[i]; // 将大于pivot的数移动到右边
        }
    }
    nums[i] = pivot; // 将基准值放到最终位置
    return i; // 返回基准值的索引
    return 0;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    // 请在这里完成你的代码
     if (l < r) { // 如果区间至少有两个元素，则进行快速排序
        int pi = partition(nums, l, r); // 分区，并返回基准值索引
        quick_sort(nums, l, pi - 1); // 对基准值左边的子数组进行快速排序
        quick_sort(nums, pi + 1, r); // 对基准值右边的子数组进行快速排序
    }
}
void QuickSort::mysort(std::vector<int>& nums) {
    if(nums.size() == 0) 
      return;
    quick_sort(nums, 0, nums.size() - 1);
}