#include "QuickSort.h"

int QuickSort::partition(std::vector<int>& nums, int p, int q) {
    int pivotValue = nums[(p + q) / 2];
    std::swap(nums[(p + q) / 2], nums[q]);
    int i = p - 1;
    for (int j = p; j < q; j++) {
        if (nums[j] <= pivotValue) {
            i++;
            std::swap(nums[i], nums[j]);
        }
    }
    std::swap(nums[i + 1], nums[q]);
    return i + 1;
}

void QuickSort::quick_sort(std::vector<int>& nums, int l, int r) {
    if (l < r) {
        int pivotIndex = partition(nums, l, r);
        quick_sort(nums, l, pivotIndex - 1);
        quick_sort(nums, pivotIndex + 1, r);
    }
}

void QuickSort::mysort(std::vector<int>& nums) {
    if (nums.empty()) return;
    quick_sort(nums, 0, nums.size() - 1);
}