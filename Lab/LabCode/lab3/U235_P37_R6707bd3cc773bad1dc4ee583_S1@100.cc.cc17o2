#include "HeapSort.h"

// Adjusts the heap structure starting from index i
void HeapSort::max_heapify(std::vector<int>& nums, int i) {
    int largest = i; // Initialize largest as root
    int left = 2 * i; // Left child index (since we use 1-based index)
    int right = 2 * i + 1; // Right child index (1-based index)

    // If left child exists and is greater than the root
    if (left <= heap_size && nums[left] > nums[largest]) {
        largest = left;
    }
    // If right child exists and is greater than the largest so far
    if (right <= heap_size && nums[right] > nums[largest]) {
        largest = right;
    }
    // If largest is not the root, swap and continue heapifying
    if (largest != i) {
        std::swap(nums[i], nums[largest]); // Swap root with largest
        max_heapify(nums, largest); // Recursively heapify the affected subtree
    }
}

// Builds a max heap from the given array
void HeapSort::build_max_heap(std::vector<int>& nums) {
    heap_size = nums.size() - 1; // Setting heap size (excluding the 0 index)
    // Start from the last non-leaf node and heapify each node
    for (int i = heap_size / 2; i >= 1; --i) {
        max_heapify(nums, i);
    }
}

// Performs heap sort on the array
void HeapSort::mysort(std::vector<int>& nums) {
    length = nums.size(); // Store the length of the array
    nums.insert(nums.begin(), 0); // Insert a dummy element at the start

    build_max_heap(nums); // Build the max heap

    // One by one extract elements from the heap
    for (int i = length - 1; i >= 1; --i) {
        std::swap(nums[1], nums[i + 1]); // Move current root to end
        heap_size--; // Reduce heap size
        max_heapify(nums, 1); // Heapify the root element
    }

    nums.erase(nums.begin()); // Remove the dummy element
}