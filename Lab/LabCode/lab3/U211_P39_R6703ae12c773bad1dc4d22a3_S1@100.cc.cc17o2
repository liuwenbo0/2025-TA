#include "ThreeWayQuickSort.h"

void ThreeWayQuickSort::three_way_quick_sort(std::vector<int>& nums, int p, int q) {
    if (p >= q) return; 
    int c = (p+q) / 2;
    if (nums[p] > nums[c]) std::swap(nums[p], nums[c]);
    if (nums[p] > nums[q]) std::swap(nums[p], nums[q]);
    if (nums[c] > nums[q]) std::swap(nums[c], nums[q]);
    int pivot = nums[p]; 
    int l = p;          
    int g = q;          
    int i = p + 1;       

    while (i <= g) {
        if (nums[i] < pivot) {
            std::swap(nums[l], nums[i]); 
            l++;
            i++;
        } else if (nums[i] > pivot) {
            std::swap(nums[i], nums[g]);
            g--;
        } else {
            i++; 
        }
    }

  
    three_way_quick_sort(nums, p, l - 1); 
    three_way_quick_sort(nums, g + 1, q); 
}

void ThreeWayQuickSort::mysort(std::vector<int>& nums) {
    if (nums.empty())
        return;
    three_way_quick_sort(nums, 0, nums.size() - 1);
}