#include<iostream>
#include<vector>
using namespace std;

int merge(vector<int>& arr, int left, int mid, int right, int& count) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        count++; 
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    } 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    return count;
}


void merge_sort(vector<int>& arr, int left, int right, int& count) {
    if (left >= right) return;
    int mid = left + (right - left) / 2;
    merge_sort(arr, left, mid, count);
    merge_sort(arr, mid + 1, right, count);
    count = merge(arr, left, mid, right, count);
}


int InsertionSort(std::vector<int>& arr) {
    int n = arr.size();
    int count = 0; 

    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && ++count&&arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    return count; 
}
int main(){
    int N;
    cin>>N;
    vector<int> nums1(N),nums2(N);
    int i;
    for(i=0;i<N;i++){
        cin>>nums1[i];
        nums2[i]=nums1[i];
    }
    int mergecount=0,insortcount=0;
      insortcount=InsertionSort(nums2);
      merge_sort(nums1,0,N-1,mergecount);
  
    cout<<mergecount<<" "<<insortcount<<endl;
}