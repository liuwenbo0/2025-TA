#include <iostream>
#include <vector>
using namespace std;
int Count1 = 0;
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1=mid-left+ 1;
    int n2=right-mid;
    vector<int>L(n1);
    vector<int>R(n2);
    for (int i=0;i<n1;i++)
        L[i]= arr[left+i];
    for (int j=0; j< n2;j++)
        R[j]=arr[mid+1+j];
    int i=0,j=0,k= left;
    while (i<n1&&j<n2) {
        Count1++;
        if (L[i]<=R[j]) {
            arr[k++]=L[i++];
        } else {
            arr[k++]=R[j++];
        }
    }
    while (i<n1) {
        arr[k++]=L[i++];
    }
    while (j<n2) {
        arr[k++]=R[j++];
    }
}
void mergeSort(vector<int>& arr, int left, int right) {
    if (left<right) {
        int mid=left+(right-left) / 2;
        mergeSort(arr,left,mid);
        mergeSort(arr,mid+1,right);
        merge(arr,left,mid,right);
    }
}
int Count2=0;
void insertionSort(vector<int>&arr) {
    int n=arr.size();
    for (int i=1;i<n;i++) {
        int k=arr[i];
        int j=i-1;
        while (j >= 0) {
            Count2++;
            if (arr[j]>k) {
                arr[j+1]=arr[j];
                j--;
            } else {
                break;
            }
        }
        arr[j+1] = k;
    }
}
int main() {
    int N;
    cin>>N;
    vector<int> arr(N);
    for (int i=0; i<N;i++) {
        cin>>arr[i];
    }
    vector<int> arrForMerge=arr; 
    mergeSort(arrForMerge,0,N-1);
    vector<int> arrForInsertion = arr; 
    insertionSort(arrForInsertion);
    cout <<Count1<< " " <<Count2<< endl;
    return 0;
}