#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

// 计算插入排序的比较次数
int insertionSortComparisons(vector<int>& arr) {
    int comparisons = 0;
    for (size_t i = 1; i < arr.size(); ++i) {
        int key = arr[i];
        size_t j = i - 1;
        while (j >= 0 && key < arr[j]) {
            arr[j + 1] = arr[j]; // 将较大的元素向右移动
            j--;
            comparisons++; // 每次循环都是一次比较
        }
        arr[j + 1] = key;
        // 如果元素没有移动，则表示没有比较，否则至少有一次比较
        if (j + 1 != i) {
            comparisons++; // 最后一次比较
        }
    }
    return comparisons;
}

// 归并排序及其辅助函数
int merge(vector<int>& arr, int l, int m, int r) {
    int comparisons = 0;
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0;
    int j = 0;
    int k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        comparisons++; // 每次循环都是一次比较
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    return comparisons;
}

int mergeSort(vector<int>& arr, int l, int r) {
    int comparisons = 0;
    if (l < r) {
        int m = l + (r - l) / 2;

        comparisons += mergeSort(arr, l, m);
        comparisons += mergeSort(arr, m + 1, r);

        comparisons += merge(arr, l, m, r);
    }
    return comparisons;
}

void solve() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    vector<int> arrCopy = arr;

    int insertionsortComparisons = insertionSortComparisons(arrCopy);
    int mergesortComparisons = mergeSort(arr, 0, n - 1);

    cout << mergesortComparisons << " " << insertionsortComparisons << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    solve();

    return 0;
}