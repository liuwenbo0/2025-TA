#include <iostream>
#include <vector>

using namespace std;

// 插入排序
int insertionSort(vector<int>& nums) {
    int flag=0;
    int n=nums.size();
    for (int i=1;i<n;++i) {
        int key =nums[i];
        int j=i-1;
        while (j>=0) {
            flag++;
            if (nums[j]>key) {
                nums[j+1]=nums[j];
                j--;
            } else {
                break; 
            }
        }
        nums[j+1] = key;
    }
    return flag;
}

// 归并排序
int mergeSort(vector<int>& nums, int left, int right) {
    if (left>= right) return 0; 
    int flag= 0;
    int mid=left+(right-left)/2;

    flag+=mergeSort(nums, left, mid);
    flag+=mergeSort(nums, mid+1, right);
    vector<int> leftArr(nums.begin() + left, nums.begin() + mid + 1);
    vector<int> rightArr(nums.begin() + mid + 1,nums.begin() + right + 1);
    int i=0,j=0,k=left;

    while (i<leftArr.size()&&j<rightArr.size()) {
        flag++; // 比较操作
        if (leftArr[i]<=rightArr[j]) {
            nums[k++]=leftArr[i++];
        } else {
            nums[k++]=rightArr[j++];
        }
    }

    while (i<leftArr.size()) {
        nums[k++]=leftArr[i++];
    }
    while (j<rightArr.size()) {
        nums[k++]=rightArr[j++];
    }

    return flag;
}

int main() {
    int n;
    cin>>n;
    vector<int> nums(n);
    for (int i=0;i<n;++i) {
        cin >> nums[i];
    }
    vector<int> numsForInsertionSort =nums; // 复制一份用于插入排序
    vector<int> numsForMergeSort = nums; // 复制一份用于归并排序

    int flag1=insertionSort(numsForInsertionSort);
    int flag2=mergeSort(numsForMergeSort,0, n-1);
    cout<<flag2<< " " <<flag1<<endl;
    return 0;
}