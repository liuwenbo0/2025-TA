#include <iostream>
#include <vector>
using namespace std;

// 插入排序
int insertionSort(vector<int>& arr) {
    int comparison_count = 0;
    for (int i = 1; i < arr.size(); i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
            comparison_count++;
        }
        arr[j + 1] = key;
        comparison_count++; // 比较当前元素
    }
    return comparison_count;
}

// 归并排序的辅助函数
int merge(vector<int>& arr, vector<int>& temp, int left, int mid, int right) {
    int comparison_count = 0;
    int i = left, j = mid + 1, k = left;
    while (i <= mid && j <= right) {
        comparison_count++;
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = arr[i++];
        comparison_count++;
    }
    while (j <= right) {
        temp[k++] = arr[j++];
        comparison_count++;
    }
    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }
    return comparison_count;
}

// 归并排序
int mergeSort(vector<int>& arr, vector<int>& temp, int left, int right) {
    int comparison_count = 0;
    if (right > left) {
        int mid = left + (right - left) / 2;
        comparison_count += mergeSort(arr, temp, left, mid);
        comparison_count += mergeSort(arr, temp, mid + 1, right);
        comparison_count += merge(arr, temp, left, mid, right);
    }
    return comparison_count;
}

int main() {
    int N;
    cin >> N;
    vector<int> arr(N);
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    vector<int> temp(N);
    int insertion_count = insertionSort(arr);
    // 为了比较，需要重新初始化数组
    for (int i = 0; i < N; i++) {
        temp[i] = arr[i];
    }
    int merge_count = mergeSort(temp, temp, 0, N - 1);

    cout << merge_count << " " << insertion_count << endl;

    return 0;
}