#include "MergeSort.h"

// 辅助函数：合并两个已排序的子数组
void merge(std::vector<int>& nums, int left, int mid, int right) {
    int n1 = mid - left + 1; // 左子数组的大小
    int n2 = right - mid;    // 右子数组的大小

    std::vector<int> leftArray(n1); // 创建左子数组
    std::vector<int> rightArray(n2); // 创建右子数组

    // 复制数据到临时数组
    for (int i = 0; i < n1; i++)
        leftArray[i] = nums[left + i];
    for (int j = 0; j < n2; j++)
        rightArray[j] = nums[mid + 1 + j];

    // 合并临时数组
    int i = 0; // 左子数组的索引
    int j = 0; // 右子数组的索引
    int k = left; // 主数组的索引

    while (i < n1 && j < n2) {
        if (leftArray[i] <= rightArray[j]) {
            nums[k] = leftArray[i];
            i++;
        } else {
            nums[k] = rightArray[j];
            j++;
        }
        k++;
    }

    // 复制左子数组的剩余元素（如果有）
    while (i < n1) {
        nums[k] = leftArray[i];
        i++;
        k++;
    }

    // 复制右子数组的剩余元素（如果有）
    while (j < n2) {
        nums[k] = rightArray[j];
        j++;
        k++;
    }
}

// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void MergeSort::merge_sort_aux(std::vector<int>& nums, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2; // 计算中点

        // 递归排序左半部分
        merge_sort_aux(nums, left, mid);
        // 递归排序右半部分
        merge_sort_aux(nums, mid + 1, right);
        // 合并已排序的部分
        merge(nums, left, mid, right);
    }
}