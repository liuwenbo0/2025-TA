#include <iostream>
#include <vector>
using namespace std;

long long merge(vector<long long>& arr, vector<long long>& temp, long long left, long long mid, long long right) {
    long long i, j, k;
    long long inv_count = 0;
    i = left; 
    j = mid; 
    k = left; 
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }
    while (i <= mid - 1)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
    return inv_count;
}

long long mergeSort(vector<long long>& arr, vector<long long>& temp, long long left, long long right) {
    long long mid, inv_count = 0;
    if (right > left) {
        mid = (right + left) / 2;
        inv_count = mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}
long long countInversions(vector<long long>& arr, long long n) {
    vector<long long> temp(n);
    return mergeSort(arr, temp, 0, n - 1);
}

int main() {
    long long n;
    cin >> n;
    vector<long long> arr(n);
    for (long long i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << countInversions(arr, n) << endl;
    return 0;
}