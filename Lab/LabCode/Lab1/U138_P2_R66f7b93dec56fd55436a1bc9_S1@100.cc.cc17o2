#include "MyStack.h"  
  
// 判断栈空, 若为空栈,则Empty()返回true；否则返回false  
bool MyStack::Empty() {  
    return top == -1; // 如果栈顶指针为-1，则栈为空  
}  
  
// 判断栈满，若栈满，则Full()为true；否则为false  
bool MyStack::Full() {  
    return top == MAXLENG - 1; // 如果栈顶指针达到数组的最大索引，则栈满  
}  
  
// 元素e进栈，若栈满，则无法成功插入，插入成功返回true，否则返回false  
// @param e: 将要入栈的元素  
bool MyStack::Push(ElementType e) {  
    if (Full()) {  
        return false; // 栈满，无法插入  
    }  
    elem[++top] = e; // 先增加栈顶指针，再赋值  
    return true; // 插入成功  
}  
  
// 栈的顶元素拷贝到e，若栈为空，则无法拷贝，返回false，成功拷贝则返回true  
// @param e: 指向存放栈顶元素地址的指针  
bool MyStack::Gettop(ElementType &e) {  
    if (Empty()) {  
        return false; // 栈空，无法拷贝  
    }  
    e = elem[top]; // 将栈顶元素的值赋给e  
    return true; // 成功拷贝  
}  
  
// 删除栈s的顶元素，并将删除的元素赋给e带出，若栈空，则无法成功删除，删除成功返回true，否则返回false  
// @param e: 指向存放出栈元素地址的指针  
bool MyStack::Pop(ElementType &e) {  
    if (Empty()) {  
        return false; // 栈空，无法删除  
    }  
    e = elem[top--]; // 先取值，再减少栈顶指针  
    // 注意：通常不需要将下一个位置重置为无效值，因为栈的后续操作会覆盖它  
    // 但如果需要，可以在这里添加相应的代码  
    return true; // 删除成功  
}