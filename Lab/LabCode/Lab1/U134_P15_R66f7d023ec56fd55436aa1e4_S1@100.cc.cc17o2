#include <iostream>
#include <vector>

using namespace std;

int mergeCount = 0;
int insertCount = 0;

void merge_sort_aux(std::vector<int>& nums, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        merge_sort_aux(nums, left, mid);
        merge_sort_aux(nums, mid + 1, right);
        std::vector<int> leftArray(nums.begin() + left, nums.begin() + mid + 1);
        std::vector<int> rightArray(nums.begin() + mid + 1, nums.begin() + right + 1);
        int i = 0, j = 0, k = left;
        while (i < leftArray.size() && j < rightArray.size()) {
            mergeCount++;
            if (leftArray[i] <= rightArray[j]) {
                nums[k++] = leftArray[i++];
            } else {
                nums[k++] = rightArray[j++];
            }
        }
        while (i < leftArray.size()) {
            nums[k++] = leftArray[i++];
        }
        while (j < rightArray.size()) {
            nums[k++] = rightArray[j++];
        }
    }
}

void insertion_sort(std::vector<int>& nums) {
    int n = nums.size();
    for (int i = 1; i < n; ++i) {
        int key = nums[i]; 
        int j = i - 1;
        while (j >= 0 && nums[j] > key) {
            insertCount++;
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = key;
        if (j >= 0) insertCount++;
    }
}

int main() {
    int N;
    cin >> N;
    vector<int> arr(N);
    for (int i = 0; i < N; i++)
        cin >> arr[i];
    vector<int> arrForMerge = arr;
    merge_sort_aux(arrForMerge, 0, N - 1);
    insertion_sort(arr);
    cout << mergeCount << " " << insertCount << endl;
    return 0;
}