#include <iostream>
#include <vector>

using namespace std;

int insertionSort(vector<int>& t) {
    int c = 0; 
    int n = t.size();
    for (int i = 1; i < n; i++) {
        int key = t[i];
        int j = i - 1;

        
        while (j >= 0 && t[j] > key) {
            c++;
            t[j + 1] = t[j];
            j--;
        }
        if (j >= 0) {
            c++; 
        }
        t[j + 1] = key;
    }
    return c;
}

int C = 0; // 归并排序的比较次数

void merge(vector<int>& a, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = a[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = a[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        C++; // 进行一次比较
        if (L[i] <= R[j]) {
            a[k] = L[i];
            i++;
        } else {
            a[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        a[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        a[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& A, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(A, left, mid);
        mergeSort(A, mid + 1, right);
        merge(A, left, mid, right);
    }
}

int main() {
    int N;
    cin >> N;
    vector<int> b(N);
    
    for (int i = 0; i < N; i++) {
        cin >> b[i];
    }

   
    vector<int> insertionArr = b; 
    int insertionComparisons = insertionSort(insertionArr);

   
    mergeSort(b, 0, N - 1);

 
    cout << C << " " << insertionComparisons << endl;

    return 0;
}