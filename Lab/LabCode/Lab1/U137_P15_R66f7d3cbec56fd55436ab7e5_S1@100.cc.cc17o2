#include <iostream>  
#include <vector>  
  
using namespace std;  
  
int mergeCountV2 = 0;  
int insertCountV2 = 0;  
  
void mergeSortAuxV2(vector<int>& nums, int left, int right) {  
    if (left < right) {  
        int mid = left + (right - left) / 2;  
        mergeSortAuxV2(nums, left, mid);  
        mergeSortAuxV2(nums, mid + 1, right);  
        vector<int> leftPart(nums.begin() + left, nums.begin() + mid + 1);  
        vector<int> rightPart(nums.begin() + mid + 1, nums.begin() + right + 1);  
        int i = 0, j = 0, k = left;  
        while (i < leftPart.size() && j < rightPart.size()) {  
            mergeCountV2++;  
            if (leftPart[i] <= rightPart[j]) {  
                nums[k++] = leftPart[i++];  
            } else {  
                nums[k++] = rightPart[j++];  
            }  
        }  
        while (i < leftPart.size()) {  
            nums[k++] = leftPart[i++];  
        }  
        while (j < rightPart.size()) {  
            nums[k++] = rightPart[j++];  
        }  
    }  
}  
  
void insertionSortV2(vector<int>& nums) {  
    int n = nums.size();  
    for (int i = 1; i < n; ++i) {  
        int key = nums[i];  
        int j = i - 1;  
        while (j >= 0 && nums[j] > key) {  
            insertCountV2++;  
            nums[j + 1] = nums[j];  
            j--;  
        }  
        nums[j + 1] = key;  
        if (j >= 0) insertCountV2++; // 注意：这个增量通常与前面的循环体合并计数，但按原样保留  
    }  
}  
  
int main() {  
    int N;  
    cin >> N;  
    vector<int> arrV2(N);  
    for (int i = 0; i < N; i++)  
        cin >> arrV2[i];  
    vector<int> mergeSortArray = arrV2;  
    mergeSortAuxV2(mergeSortArray, 0, N - 1);  
    insertionSortV2(arrV2);  
    cout << mergeCountV2 << " " << insertCountV2 << endl;  
    return 0;  
}