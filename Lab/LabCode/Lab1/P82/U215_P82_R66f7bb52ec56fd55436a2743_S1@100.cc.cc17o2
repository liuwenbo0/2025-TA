#include "Linklist.h"

void changeList(Linklist &list) {
    if (!list || !list->next || list->next == list) return;  // 链表为空或仅有一个节点
    
    Linklist odd = nullptr, even = nullptr;  // 奇数、偶数位置链表头节点
    Linklist oddTail = nullptr, evenTail = nullptr;  // 奇数、偶数位置链表尾节点
    Linklist current = list->next;  // 跳过head节点，开始遍历实际元素
    int index = 1;  // 位置索引，从1开始

    // 分割奇数位置和偶数位置节点
    while (current != list) {
        if (index % 2 == 1) {  // 奇数位置
            if (!odd) {
                odd = current;
                oddTail = current;
            } else {
                oddTail->next = current;
                current->prior = oddTail;
                oddTail = current;
            }
        } else {  // 偶数位置
            if (!even) {
                even = current;
                evenTail = current;
            } else {
                evenTail->next = current;
                current->prior = evenTail;
                evenTail = current;
            }
        }
        current = current->next;
        index++;
    }

    // 关闭奇数和偶数链表尾部的环形结构
    if (oddTail) {
        oddTail->next = list;
        list->prior = oddTail;
    }

    if (evenTail) {
        evenTail->next = nullptr;  // 偶数链表临时解开环形
    }

    // 反转偶数位置的链表
    Linklist prev = nullptr, nextNode = nullptr;
    current = even;

    while (current) {
        nextNode = current->next;
        current->next = prev;
        current->prior = nextNode;
        prev = current;
        current = nextNode;
    }

    // 合并奇数位置链表和反转后的偶数链表
    Linklist reversedEven = prev;  // 反转后的偶数链表头节点
    if (oddTail && reversedEven) {
        oddTail->next = reversedEven;
        reversedEven->prior = oddTail;

        // 找到反转后偶数链表的尾部
        while (reversedEven->next) {
            reversedEven = reversedEven->next;
        }

        // 闭合反转后的偶数链表与head的环形链表
        reversedEven->next = list;
        list->prior = reversedEven;
    }
}