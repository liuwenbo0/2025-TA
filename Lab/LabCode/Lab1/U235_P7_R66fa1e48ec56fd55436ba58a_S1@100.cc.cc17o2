#include "MergeSort.h"
    
// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void MergeSort::merge_sort_aux(std::vector<int> &nums, int left, int right)
{
    // 如果当前区间的左端点小于右端点，说明区间内有多个元素
    if (left < right) {
        // 找到中间点
        int mid = left + (right - left) / 2;

        // 递归地对左右两个子区间进行排序
        merge_sort_aux(nums, left, mid);        // 对左半部分进行排序
        merge_sort_aux(nums, mid + 1, right);   // 对右半部分进行排序

        // 合并两个已排序的子区间
        int n1 = mid - left + 1; // 左子数组的大小
    int n2 = right - mid;    // 右子数组的大小

    // 创建临时数组
    std::vector<int> leftArr(n1);
    std::vector<int> rightArr(n2);

    // 拷贝数据到临时数组
    for (int i = 0; i < n1; i++)
        leftArr[i] = nums[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = nums[mid + 1 + j];

    // 归并临时数组

    // 初始索引
    int i = 0; // 左子数组的索引
    int j = 0; // 右子数组的索引
    int k = left; // 合并后的数组索引

    // 逐个比较两个子数组的元素并合并
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            nums[k++] = leftArr[i++];
        } else {
            nums[k++] = rightArr[j++];
        }
    }

    // 复制左子数组剩余的元素
    while (i < n1) {
        nums[k++] = leftArr[i++];
    }

    // 复制右子数组剩余的元素
    while (j < n2) {
        nums[k++] = rightArr[j++];
    }
    }
}