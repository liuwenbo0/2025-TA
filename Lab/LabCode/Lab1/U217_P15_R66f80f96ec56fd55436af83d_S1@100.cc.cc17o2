#include <iostream>
#include <iomanip>
#include <cmath>
#include <algorithm>
#include <vector>

using namespace std;

// 插入排序，返回比较次数
int mysort(std::vector<int>& nums) {
    int count1 = 0;
    for (int i = 1; i < nums.size(); ++i) {
        int key = nums[i];
        int j = i - 1;
        // 在 while 循环中，每次比较 nums[j] > key
        while (j >= 0 && nums[j] > key) {
            nums[j + 1] = nums[j];
            j--;
            count1++; // 记录一次成功的比较
        }
        // 如果 j >= 0，则还有一次比较是失败的（nums[j] <= key）
        if (j >= 0) {
            count1++; // 记录一次失败的比较
        }
        nums[j + 1] = key;
    }
    return count1;
}

// 合并两个有序区间，记录比较次数
void mergea(std::vector<int>& nums, int left, int mid, int right, int& count) {
    std::vector<int> temp(right - left + 1);
    int i = left;       // 左区间起点
    int j = mid + 1;    // 右区间起点
    int k = 0;          // 临时数组的索引

    // 合并两个有序区间
    while (i <= mid && j <= right) {
        count++; // 每次进行比较时，递增计数器
        if (nums[i] <= nums[j]) {
            temp[k++] = nums[i++];
        } else {
            temp[k++] = nums[j++];
        }
    }

    // 处理剩余元素
    while (i <= mid) {
        temp[k++] = nums[i++];
    }

    while (j <= right) {
        temp[k++] = nums[j++];
    }

    // 将临时数组中的元素复制回原数组
    for (size_t p = 0; p < temp.size(); p++) {
        nums[left + p] = temp[p];
    }
}

// 归并排序，返回比较次数
int merge_sort_aux(std::vector<int>& nums, int left, int right) {
    if (left >= right) {
        return 0;
    }

    int mid = left + (right - left) / 2;
    int count1 = merge_sort_aux(nums, left, mid);       // 左半部分的比较次数
    int count2 = merge_sort_aux(nums, mid + 1, right);  // 右半部分的比较次数
    int count3 = 0; // 当前合并操作的比较次数

    mergea(nums, left, mid, right, count3);             // 合并两个有序区间，并记录比较次数

    return count1 + count2 + count3;                    // 总比较次数
}

int main() {
    int M = 0;
    cin >> M;
    vector<int> num(M);
    for (int i = 0; i < M; i++) {
        cin >> num[i];
    }

    // 为插入排序和归并排序分别创建数组副本
    vector<int> num_insertion = num;
    vector<int> num_merge = num;

    // 进行插入排序并记录比较次数
    int count1 = mysort(num_insertion);

    // 进行归并排序并记录比较次数
    int count2 = merge_sort_aux(num_merge, 0, M - 1);

    // 输出比较次数
    cout << count2 << " " << count1 << endl;

    return 0;
}