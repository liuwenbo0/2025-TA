#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long long merge(vector<int>& nums, int left, int mid, int right, vector<int>& temp) {
    int i = left, j = mid + 1, k = 0;
    long long inversions = 0;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) {
            // 如果左边的元素小于等于右边的元素，没有逆序对
            temp[k++] = nums[i++];
        } else {
            // 如果左边的元素大于右边的元素，左边所有剩余的元素都与nums[j]构成逆序对
            temp[k++] = nums[j++];
            inversions += (mid - i + 1);
        }
    }
    while (i <= mid) {
        temp[k++] = nums[i++];
    }
    while (j <= right) {
        temp[k++] = nums[j++];
    }
    for (int i = left; i <= right; ++i) {
        nums[i] = temp[i - left];
    }
    return inversions;
}

long long mergeSort(vector<int>& nums, int left, int right, vector<int>& temp) {
    long long inversions = 0;
    if (right > left) {
        int mid = left + (right - left) / 2;
        inversions += mergeSort(nums, left, mid, temp);
        inversions += mergeSort(nums, mid + 1, right, temp);
        inversions += merge(nums, left, mid, right, temp);
    }
    return inversions;
}

int main() {
    int n;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }
    vector<int> temp(n);
    long long inversions = mergeSort(nums, 0, n - 1, temp);
    cout << inversions << endl;
    return 0;
}