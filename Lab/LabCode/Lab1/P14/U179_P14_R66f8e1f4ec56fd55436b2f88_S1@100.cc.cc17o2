#include <iostream>
#include <vector>
using namespace std;


long long inversion = 0;
long long MergeSort(vector<int>& nums, int left, int right) {
    if (left >= right) {
        return 0;
    }
    int mid = (left + right) / 2;
    MergeSort(nums, left, mid);
    MergeSort(nums, mid + 1, right);

    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = nums[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = nums[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        
        if (L[i] <= R[j]) {
            nums[k] = L[i];
            i++;
            
        } else {
            nums[k] = R[j];
            j++;
            inversion+=n1-i; // 统计逆序对
        }
        k++;
    }

    while (i < n1) {
        nums[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        nums[k] = R[j];
        j++;
        k++;
    }
    return inversion;
}

int main() {
    int N;
    cin >> N;
    vector<int>  mergenums(N);
    for (int i = 0; i < N; i++) {
        cin >> mergenums[i] ;
    }

    MergeSort(mergenums, 0, N - 1); 
    
    cout << inversion << endl; 

    return 0;
}