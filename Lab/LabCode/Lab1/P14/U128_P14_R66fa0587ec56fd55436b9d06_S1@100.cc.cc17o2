#include <iostream>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
using namespace std;


long long MergeSort(int *arr, int *temp, int left,int right)
{
    if (left >= right) return 0;
    long long count = 0;
    int mid = (left + right)/2;    
    count += MergeSort(arr, temp, left, mid);
    count += MergeSort(arr, temp, mid + 1, right);
    int l = left, j = mid +1, k = left;
    while (l <= mid && j <= right) {
        if (arr[l] <= arr[j]) {
            temp[k] = arr[l];
            l++;
        } else {
            temp[k] = arr[j];
            count += (mid - l + 1);
            j++;
        }
        k++;
    }
    while (l <= mid) {
        temp[k] = arr[l];
        l++;
        k++;
    }
    while (j <= right) {
        temp[k] = arr[j];
        j++;
        k++;
    }
    for (int i = left; i <= right; i++) {
        arr[i] = temp[i];
    }
    return count;
}
int main()
{
    int n;
    scanf("%d", &n);
    int *arr = (int *) malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    int *temp = (int *) malloc(n * sizeof(int));
    long long inv_count = MergeSort(arr, temp, 0, n - 1);
    printf("%lld\n", inv_count);
    free(arr);
    free(temp);
    return 0;   
}