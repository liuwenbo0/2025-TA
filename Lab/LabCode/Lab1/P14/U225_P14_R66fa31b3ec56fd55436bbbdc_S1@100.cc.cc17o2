#include <iostream>
#include <vector>
using namespace std;
long long merge(vector<int>& nums,vector<int>& temp,int left,int mid,int right) {
    long long count=0;
    int i=left,j=mid+1,k=left;
    while (i<=mid && j<=right) {
        if (nums[i]<=nums[j]) {
            temp[k++]=nums[i++];
        } else {
            temp[k++] = nums[j++];
            count+=mid-i+1;
        }
    }
    
    while(i<=mid){
        temp[k++]=nums[i++];
    }
    
    while(j<=right){
        temp[k++]=nums[j++];
    }
    
    for(i=left;i<=right;i++){
        nums[i]=temp[i];
    }
    
    return count;
}

long long mergeSort(vector<int>& nums, vector<int>& temp, int left, int right) {
    long long count = 0;
    if (left<right){
        int mid=(left+right)/2;
        count+=mergeSort(nums,temp,left,mid);
        count+=mergeSort(nums,temp,mid+1,right);
        count+=merge(nums,temp,left,mid,right);
    }
    return count;
}

int main(){
    int n;
    cin>>n;
    vector<int> nums(n);
    vector<int> temp(n);
    for (int i=0;i<n;i++){
        cin>>nums[i];
    }
    cout<<mergeSort(nums,temp,0,n-1)<<endl;
    return 0;
}