#include <iostream>
#include <vector>

using namespace std;
long long merge(vector<int>& nums, int left, int q, int right) 
{
    int n1 = q - left + 1;
    int n2 = right - q;
    vector<int> L(n1);
     vector<int>R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = nums[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = nums[q + 1 + j];
    int i = 0, j = 0, k = left;
    long long count = 0;
    while (i < n1 && j < n2) 
    {
        if (L[i] <= R[j]) 
        {
            nums[k] = L[i];
            i++;
            k++;
        } else 
        {
            nums[k] = R[j];
            j++;
            k++;
            count += n1 - i;
        }
    }
    while (i < n1)
     {
        nums[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) 
    {
        nums[k] = R[j];
        j++;
        k++;
    }
    return count;
}
long long mergeSort(vector<int>& nums, int left, int right)
 {
    long long count = 0;
    if (left < right) {
        int q = left + (right - left) / 2;
        count += mergeSort(nums, left, q);
        count += mergeSort(nums, q + 1, right);
        count += merge(nums, left, q, right);
    }
    return count;
}
int main()
 {
    int n;
    cin >> n;
    vector<int> a;
    for (int i = 0; i < n; i++)
     {
        int x1;
        cin>>x1;
        a.push_back(x1);
     }   

    cout << mergeSort(a, 0, n - 1);
    return 0;
}