#include <iostream>  
#include <vector>  
using namespace std;  
   
long long MergeSort(vector<int>& nums, int left, int right) {  
    long long count = 0;  
    if (left < right) {  
        int mid = (left + right) / 2;  
        count += MergeSort(nums, left, mid);  
        count += MergeSort(nums, mid + 1, right);  
  
        int n1 = mid - left + 1;  
        int n2 = right - mid;  
        vector<int> L(n1), R(n2);  
        for (int i = 0; i < n1; i++) L[i] = nums[left + i];  
        for (int j = 0; j < n2; j++) R[j] = nums[mid + 1 + j];  
  
        int i = 0, j = 0, k = left;  
        while (i < n1 && j < n2) {  
            if (L[i] <= R[j]) {  
                nums[k] = L[i];  
                i++;  
            } else {  
                nums[k] = R[j];  
                j++;  
                count += n1-i; 
            }  
            k++;  
        }  
        while (i < n1) {  
            nums[k] = L[i];  
            i++;  
            k++;  
        }  
        while (j < n2) {  
            nums[k] = R[j];  
            j++;  
            k++;  
        }  
    }  
    return count;  
}

  
int main() {  
    int n;  
    cin >> n;  
    vector<int> nums(n);  
    for (int i = 0; i < n; i++) {  
        cin >> nums[i];  
    }  
    cout << MergeSort(nums, 0, n - 1) << endl;  
    return 0;  
}