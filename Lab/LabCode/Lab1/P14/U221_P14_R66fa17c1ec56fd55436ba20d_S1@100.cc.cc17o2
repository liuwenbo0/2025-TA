#include <iostream>
#include <vector>
#include <cstdio>

// 使用归并排序并计算逆序对
class MergeSort {
public:
  long long merge_sort_aux(std::vector<int>& nums, int left, int right) {
    if (left >= right) {
      return 0;
    }
    int mid = left + (right - left) / 2;
    long long iop_count = 0;
    iop_count += merge_sort_aux(nums, left, mid);
    iop_count += merge_sort_aux(nums, mid + 1, right);
    iop_count += merge(nums, left, mid, right);
    return iop_count;
  }

  long long merge(std::vector<int>& nums, int left, int mid, int right) {
    int x = mid - left + 1;
    int y = right - mid;
    std::vector<int> L(x), R(y);

    for (int i = 0; i < x; ++i) {
      L[i] = nums[left + i];
    }
    for (int i = 0; i < y; ++i) {
      R[i] = nums[mid + 1 + i];
    }

    int i = 0, j = 0, k = left;
    long long iop_count = 0;
    while (i < x && j < y) {
      if (L[i] <= R[j]) {
        nums[k] = L[i];
        ++i;
      } else {
        nums[k] = R[j];
        iop_count += (x - i); // 计算逆序对
        ++j;
      }
      ++k;
    }

    while (i < x) {
      nums[k] = L[i];
      ++i;
      ++k;
    }

    while (j < y) {
      nums[k] = R[j];
      ++j;
      ++k;
    }
    return iop_count;
  }

  long long merge_sort(std::vector<int>& nums) {
    return merge_sort_aux(nums, 0, nums.size() - 1);
  }
};

int main() {
  // 输入数据
  int n;
  std::cin >> n;
  std::vector<int> nums(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> nums[i];
  }

  MergeSort merge_sorter;
  long long iop_count = merge_sorter.merge_sort(nums);
  std::cout << iop_count << std::endl;
  return 0;
}