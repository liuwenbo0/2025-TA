#include <iostream>  
#include <vector>  
  
using namespace std;  
  
  
long long mergeConsiderations = 0;  
  
  
void mergeAndCount(vector<int>& nums, int left, int mid, int right) {  
    int n1 = mid - left + 1;  
    int n2 = right - mid;  
    vector<int> L(n1);  
    vector<int> R(n2);  
    for (int i = 0; i < n1; i++)  
        L[i] = nums[left + i];  
    for (int j = 0; j < n2; j++)  
        R[j] = nums[mid + 1 + j];  
    int i = 0, j = 0, k = left;  
    while (i < n1 && j < n2) {  
        if (L[i] <= R[j]) {  
            nums[k++] = L[i++];  
        } else {  
            nums[k++] = R[j++];  
            
            mergeConsiderations += (n1 - i);   
        }  
    }  
    
    while (i < n1) {  
        nums[k++] = L[i++];  
    }  
    while (j < n2) {  
        nums[k++] = R[j++];  
    }  
}  
  

void mergeSort(vector<int>& nums, int left, int right) {  
    if (left < right) {  
        int mid = left + (right - left) / 2;  
        mergeSort(nums, left, mid);  
        mergeSort(nums, mid + 1, right);  
        mergeAndCount(nums, left, mid, right);  
    }  
}  
  
int main() {  
    int n;  
    cin >> n;  
    vector<int> nums(n);  
    for (int i = 0; i < n; i++) {  
        cin >> nums[i];  
    }  
    mergeSort(nums, 0, n - 1);  
    cout << mergeConsiderations << endl;  
    return 0;  
}