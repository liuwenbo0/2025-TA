#include <iostream>
#include <vector>
using namespace std;
long long merge(vector<int> &nums, int left, int mid, int right) {
	int n1 = mid - left + 1;
	int n2 = right - mid;
	long long inversions = 0;
	vector<int> L(n1), R(n2);
	for (int i = 0; i < n1; i++) {
		L[i] = nums[left + i];
	}
	for (int j = 0; j < n2; j++) {
		R[j] = nums[mid + 1 + j];
	}
	int i = 0, j = 0;
	for (int k = left; k <= right; k++) {
		if (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				nums[k] = L[i];
				i++;
			} else {
				nums[k] = R[j];
				j++;
				inversions += (long long)(n1 - i);
			}
		} else if (i < n1) {
			nums[k] = L[i];
			i++;
		} else {
			nums[k] = R[j];
			j++;
		}
	}
	return inversions;
}
long long mergeSort(vector<int> &nums, int left, int right) {
	long long inversions = 0;
	if (left < right) {
		int mid = left + (right - left) / 2;
		inversions += mergeSort(nums, left, mid);
		inversions += mergeSort(nums, mid + 1, right);
		inversions += merge(nums, left, mid, right);
	}
	return inversions;
}
int main() {
	int n;
	cin >> n;
	vector<int> nums(n);
	for (int i = 0; i < n; i++) {
		cin >> nums[i];
	}
	cout << mergeSort(nums, 0, n - 1) << endl;
	return 0;
}