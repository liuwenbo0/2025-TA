#include <iostream>
#include <vector>
using namespace std;

// 合并并计数逆序对
long long mergeAndCount(vector<long long>& arr, int left, int mid, int right) {
    long long count = 0;

    // 创建两个临时数组，分别存储左半部分和右半部分
    vector<long long> leftArr(arr.begin() + left, arr.begin() + mid + 1);
    vector<long long> rightArr(arr.begin() + mid + 1, arr.begin() + right + 1);

    int i = 0, j = 0, k = left;
    int leftSize = leftArr.size(), rightSize = rightArr.size();

    // 合并两个子数组，并在合并过程中计数逆序对
    while (i < leftSize && j < rightSize) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            count += (leftSize - i);  // 逆序对出现
        }
    }

    // 复制剩余的元素
    while (i < leftSize) {
        arr[k++] = leftArr[i++];
    }
    while (j < rightSize) {
        arr[k++] = rightArr[j++];
    }

    return count;
}

// 归并排序并计数逆序对
long long mergeSortAndCount(vector<long long>& arr, int left, int right) {
    long long count = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;
        count += mergeSortAndCount(arr, left, mid);
        count += mergeSortAndCount(arr, mid + 1, right);
        count += mergeAndCount(arr, left, mid, right);
    }
    return count;
}

int main() {
    int n;
    cin >> n;
    vector<long long> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    long long result = mergeSortAndCount(arr, 0, n - 1);
    cout << result << endl;

    return 0;
}