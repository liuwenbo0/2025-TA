#include <iostream>
#include <vector>

using namespace std;

int insertionSort(vector<int>& arr) {
    int comparisons = 0;
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        
        while (j >= 0 && arr[j] > key) {
            comparisons++;
            arr[j + 1] = arr[j];
            j--;
        }
        
        if (j >= 0) comparisons++;
        arr[j + 1] = key;
    }
    return comparisons;
}

void merge(vector<int>& arr, int left, int mid, int right, int& comparisons) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        comparisons++;
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

int mergeSort(vector<int>& arr, int left, int right) {
    int comparisons = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        comparisons += mergeSort(arr, left, mid);
        comparisons += mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right, comparisons);
    }
    return comparisons;
}

int main() {
    int N;
    cin >> N;
    vector<int> arr(N);

    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    vector<int> arrForInsertion = arr;
    int insertionComparisons = insertionSort(arrForInsertion);

    vector<int> arrForMerge = arr;
    int mergeComparisons = mergeSort(arrForMerge, 0, N - 1);

    cout << mergeComparisons << " " << insertionComparisons << endl;

    return 0;
}