#include <iostream>
#include <vector>

using namespace std;

// 插入排序并统计比较次数
int insertionSort(vector<int>& arr) {
    int comparisons = 0;
    for (int i = 1; i < arr.size(); ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
            ++comparisons;
        }
        arr[j + 1] = key;
        if (j >= 0) {
            ++comparisons; // 最后一次比较
        }
    }
    return comparisons;
}

// 归并排序并统计比较次数
int mergeSort(vector<int>& arr, int left, int right, int& comparisons) {
    if (left >= right) {
        return 0;
    }

    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid, comparisons);
    mergeSort(arr, mid + 1, right, comparisons);

    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
        ++comparisons;
    }

    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (int p = 0; p < k; ++p) {
        arr[left + p] = temp[p];
    }

    return comparisons;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    vector<int> arrCopy = arr; // 复制数组以便分别进行插入排序和归并排序

    int insertionComparisons = insertionSort(arr);
    int mergeComparisons = 0;
    mergeSort(arrCopy, 0, n - 1, mergeComparisons);

    cout << mergeComparisons << " " << insertionComparisons << endl;

    return 0;
}