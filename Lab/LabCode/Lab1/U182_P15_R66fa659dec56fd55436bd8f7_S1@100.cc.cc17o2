#include <vector>
#include <iostream>

using namespace std;

int insertCompareCount = 0, mergeCompareCount = 0;

// 插入排序，同时统计比较次数
void insertionSort(vector<int>& nums) {
    int size = nums.size();
    for (int i = 1; i < size; ++i) {
        int key = nums[i];
        int j = i - 1;

        while (j >= 0) {
            insertCompareCount++;
            if(nums[j] > key){
            nums[j + 1] = nums[j];
            j = j - 1;
            }else break;
        }
        nums[j + 1] = key;
    }
}


void mergeSort(vector<int>& nums, int left, int right) {
    if (left >= right) return;
    int mid = left + (right - left)/2;
    mergeSort(nums, left, mid);
    mergeSort(nums, mid + 1, right);
    
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++){
    L[i] = nums[left + i];
    }
    for (int j = 0; j < n2; j++){
        R[j] = nums[mid+1+j];
    }

    int i = 0, j = 0;
    int k = left;
    while (i < n1 && j < n2) {
        mergeCompareCount++; // 每次比较一次
        if (L[i] <= R[j]) {
            nums[k] = L[i];
            i++;
        } else {
            nums[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        nums[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        nums[k] = R[j];
        j++;
        k++;
    }
}

int main() {
    int N;
    cin >> N;
    vector<int> nums(N);
    for (int i = 0; i < N; i++) {
        cin >> nums[i];
    }
    vector<int> numsCopy = nums; // 复制数组用于归并排序

    insertionSort(nums);
    mergeSort(numsCopy, 0, N - 1);

    cout << mergeCompareCount << " " << insertCompareCount << endl;

    return 0;
}