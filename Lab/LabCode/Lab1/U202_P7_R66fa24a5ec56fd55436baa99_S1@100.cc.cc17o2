#include "MergeSort.h"
    
// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void merge(std::vector<int> &nums, int left, int mid,int right)
{
    int a = 0,b = mid + 1,c = left;
    int* numsa = new int[right - left + 1];
    for (;c <= mid && b <= right;){
        if (nums[c] <= nums[b]){
            numsa[a++] = nums[c++];
        }
        else{
            numsa[a++] = nums[b++];
        }
    }
    for (;c <= mid;){
        numsa[a++] = nums[c++];
    }
    for (;b <= right;){
        numsa[a++] = nums[b++];
    }
    a = 0;
    for (int c = left; c <= right; c++){
        nums[c] = numsa[a++];
    }
    delete[]numsa;
}

void MergeSort::merge_sort_aux(std::vector<int> &nums, int left, int right)
{
    if (left < right){
        int mid = (left + right) / 2;
        MergeSort::merge_sort_aux(nums, left, mid);
        MergeSort::merge_sort_aux(nums, mid + 1, right);
        merge(nums, left, mid, right);
    }
}