#include "MergeSort.h"
using namespace std;
// 通过归并排序对 int 队列 nums 中的[left, right]区间进行升序排序，并统计比较次数
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在 nums 中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
int MergeSort::merge_sort_aux(std::vector<int>& nums, int left, int right) {
    if (left >= right) {
        return 0;
    }
    int mid = left + (right - left) / 2;
    int nnn = 0;
    nnn += merge_sort_aux(nums, left, mid);
    nnn += merge_sort_aux(nums, mid + 1, right);
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right) {
        nnn++;
        if (nums[i] <= nums[j]) {
            temp[k++] = nums[i++];
        } else {
            temp[k++] = nums[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = nums[i++];
    }
    while (j <= right) {
        temp[k++] = nums[j++];
    }
    for (int k = 0; k < temp.size(); k++) {
        nums[left + k] = temp[k];
    }
    return nnn;
    void InsertionSort::mysort(vector<int>& nums) {
    int n = nums.size();
    int iii = 0;
    for (int i = 1; i < n; i++) {
        int key = nums[i];
        int j = i - 1;
        while (j >= 0 && nums[j] > key) {
            iii++;
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = key;
    }
    cout<<nnn<<iii<<endl;
    // 可以将比较次数存储起来或者返回出去，这里假设你有一个成员变量来存储比较次数
    // 例如：this->comparisonCount = comparisonCount;
}