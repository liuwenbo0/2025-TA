#include <iostream>
#include <vector>
using namespace std;

int merge(vector<int>& nums, int left, int mid, int right, int& inversionCount) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) {
        L[i] = nums[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = nums[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            nums[k] = L[i];
            i++;
        } else {
            nums[k] = R[j];
            j++;
            inversionCount += (mid - left + 1) - i; // 计算逆序对
        }
        k++;
    }

    while (i < n1) {
        nums[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        nums[k] = R[j];
        j++;
        k++;
    }
    return inversionCount;
}

int mergeSort(vector<int>& nums, int left, int right, int& inversionCount) {
    if (left >= right) {
        return inversionCount;
    }
    int mid = left + (right - left) / 2;
    mergeSort(nums, left, mid, inversionCount);
    mergeSort(nums, mid + 1, right, inversionCount);
    return merge(nums, left, mid, right, inversionCount);
}

int main() {
    int n;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
    int inversionCount = 0;
    mergeSort(nums, 0, n - 1, inversionCount);
    cout << inversionCount << endl;
    return 0;
}