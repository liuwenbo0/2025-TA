#include "MergeSort.h"
    
// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void merge(vector<int>& nums, int left, int middle, int right) {
    int n1 = middle - left + 1;  
    int n2 = right - middle;     
    vector<int> temp1(n1);
    vector<int> temp2(n2);
    for (int i = 0; i < n1; i++) {
        temp1[i] = nums[left + i];
    }
    for (int j = 0; j < n2; j++) {
        temp2[j] = nums[middle + 1 + j];
    }
    int i = 0;  
    int j = 0;  
    int k = left;

    while (i < n1 && j < n2) {
        if (temp1[i] <= temp2[j]) {
            nums[k] = temp1[i];
            i++;
        } else {
            nums[k] = temp2[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        nums[k] = temp1[i];
        i++;
        k++;
    }
    while (j < n2) {
        nums[k] = temp2[j];
        j++;
        k++;
    }
}
void MergeSort::merge_sort_aux(std::vector<int> &nums, int left, int right)
{
    int m=0;
    //请在这里完成你的代码
    if (left<right){
        m=left +(right-left)/2;
    merge_sort_aux(nums,left,m);
    merge_sort_aux(nums,m+1,right);
    merge(nums,left,m,right);
    }
}