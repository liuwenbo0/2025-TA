#include "MergeSort.h"
    
// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void MergeSort::merge_sort_aux(vector<int>& nums, int left, int right) {
    if (left >= right) return;

    int mid = left + (right - left) / 2;
    merge_sort_aux(nums, left, mid);
    merge_sort_aux(nums, mid + 1, right);

    vector<int> sorted_left(mid - left + 1);
    vector<int> sorted_right(right - mid);

    int i = left, j = mid + 1, k = 0, l = 0;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) {
            sorted_left[k++] = nums[i++];
        } else {
            sorted_right[l++] = nums[j++];
        }
    }

    while (i <= mid) {
        sorted_left[k++] = nums[i++];
    }
    while (j <= right) {
        sorted_right[l++] = nums[j++];
    }
    i = left; 
    k = 0; 
    l = 0; 
    while (k < sorted_left.size() && l < sorted_right.size()) {
        if (sorted_left[k] <= sorted_right[l]) {
            nums[i++] = sorted_left[k++];
        } else {
            nums[i++] = sorted_right[l++];
        }
    }
    while (k < sorted_left.size()) {
        nums[i++] = sorted_left[k++];
    }
    while (l < sorted_right.size()) {
        nums[i++] = sorted_right[l++];
    }
}