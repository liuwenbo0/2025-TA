#include "MergeSort.h"

// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
void MergeSort::merge_sort_aux(std::vector<int> &nums, int left, int right) {
    // 基本条件，如果左指针大于或等于右指针，则返回
    if (left >= right) {
        return;
    }

    // 计算中间位置
    int mid = left + (right - left) / 2;

    // 递归排序左半部分和右半部分
    merge_sort_aux(nums, left, mid);
    merge_sort_aux(nums, mid + 1, right);

    // 合并已排序的左右部分
    std::vector<int> leftVec(nums.begin() + left, nums.begin() + mid + 1);
    std::vector<int> rightVec(nums.begin() + mid + 1, nums.begin() + right + 1);

    int i = 0; // 左子数组的索引
    int j = 0; // 右子数组的索引
    int k = left; // 合并后的数组的索引

    // 合并两个子数组
    while (i < leftVec.size() && j < rightVec.size()) {
        if (leftVec[i] <= rightVec[j]) {
            nums[k++] = leftVec[i++];
        } else {
            nums[k++] = rightVec[j++];
        }
    }

    // 复制剩余的元素到原数组
    while (i < leftVec.size()) {
        nums[k++] = leftVec[i++];
    }

    while (j < rightVec.size()) {
        nums[k++] = rightVec[j++];
    }
}