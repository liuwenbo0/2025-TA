#include <iostream>
#include <vector>
using namespace std;
#define int long long

int merge(vector<int> &nums, int left, int mid, int right, vector<int> &tem) {
    int con = 0;
    int i = left, j = mid + 1, k = left;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) {
            tem[k++] = nums[i++];
        } else {
            tem[k++] = nums[j++];
            con += (mid - i + 1);
        }
    }
    while (i <= mid) {
        tem[k++] = nums[i++];
    }
    while (j <= right) {
        tem[k++] = nums[j++];
    }
    for (int m = left; m <= right; m++) {
        nums[m] = tem[m];
    }
    return con;
}

int mergesort(vector<int>& arr, int left, int right, vector<int> &tem) {
    int Con = 0;
    if (left < right) {
        int mid = (left + right) / 2;
        Con += mergesort(arr, left, mid, tem);
        Con += mergesort(arr, mid + 1, right, tem);
        Con += merge(arr, left, mid, right, tem); 
    }
    return Con;
}

int count(vector<int>& arr) {
    vector<int> tem(arr.size());
    return mergesort(arr, 0, arr.size() - 1, tem);
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int N;
    cin >> N;

    vector<int> arr(N);
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }
    int result = count(arr);
    cout << result << endl;

    return 0;
}