#include <iostream>
#include <vector>

using namespace std;

// 比较计数器
int mergeCompareCount = 0; // 归并排序比较次数
int insertionCompareCount = 0; // 插入排序比较次数

// 归并排序辅助函数
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);
    
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        mergeCompareCount++; // 统计比较
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1) {
        arr[k++] = L[i++];
    }

    while (j < n2) {
        arr[k++] = R[j++];
    }
}

// 归并排序
void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// 插入排序
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0) {
            insertionCompareCount++; // 统计比较
            if (arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            } else {
                break;
            }
        }
        arr[j + 1] = key;
    }
}

int main() {
    int N;
    cin >> N;
    vector<int> nums(N);

    for (int i = 0; i < N; i++) {
        cin >> nums[i];
    }

    vector<int> mergeSortArr = nums; // 归并排序用的数组
    mergeSort(mergeSortArr, 0, N - 1); // 进行归并排序

    vector<int> insertionSortArr = nums; // 插入排序用的数组
    insertionSort(insertionSortArr); // 进行插入排序

    // 输出比较次数
    cout << mergeCompareCount << " " << insertionCompareCount << endl;

    return 0;
}