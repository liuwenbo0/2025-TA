#include "MergeSort.h"

// 通过归并排序对int队列nums中的[left, right]区间进行升序排序
// @param
// nums: 完整的待排序队列，最终排序的结果应存放在nums中
// left: 当前排序区间的左端点
// right: 当前排序区间的右端点
void MergeSort::merge_sort_aux(std::vector<int> &nums, int left, int right) {
    if (left >= right) {
        return; // 如果区间只有一个元素或没有元素，则不需要排序
    }
    int mid = left + (right - left) / 2; // 计算中间索引
    merge_sort_aux(nums, left, mid); // 递归排序左半部分
    merge_sort_aux(nums, mid + 1, right); // 递归排序右半部分

    int n1 = mid - left + 1; // 左半部分的大小
    int n2 = right - mid; // 右半部分的大小

    // 创建临时数组
    vector<int> L(n1), R(n2);

    // 拷贝数据到临时数组
    for (int i = 0; i < n1; i++) {
        L[i] = nums[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = nums[mid + 1 + j];
    }

    // 合并临时数组回原数组
    int i = 0; // 左半部分的索引
    int j = 0; // 右半部分的索引
    int k = left; // 原数组的索引
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            nums[k] = L[i];
            i++;
        } else {
            nums[k] = R[j];
            j++;
        }
        k++;
    }

    // 拷贝剩余的元素
    while (i < n1) {
        nums[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        nums[k] = R[j];
        j++;
        k++;
    }
}