#include <stdio.h>  
#include <stdlib.h>  
  
  
long long mergeAndCount(int arr[], int temp[], int left, int mid, int right) {  
    int i, j, k;  
    long long count = 0;   
    for (i = left; i <= right; i++)  
        temp[i] = arr[i];  

    i = left;   
    j = mid + 1;   
    k = left;    
    while ((i <= mid) && (j <= right)) {  
        if (temp[i] <= temp[j]) {  
            arr[k] = temp[i];  
            i++;  
        } else {  
            arr[k] = temp[j];   
            count += (mid - i + 1);  
            j++;  
        }  
        k++;  
    }   
    while (i <= mid) {  
        arr[k] = temp[i];  
        i++;  
        k++;  
    }  
    while (j <= right) {  
        arr[k] = temp[j];  
        j++;  
        k++;  
    }  
    return count;  
}  
long long mergeSortAndCount(int arr[], int temp[], int left, int right) {  
    long long count = 0;  
    if (right > left) {  
        int mid = left + (right - left) / 2;  
        count += mergeSortAndCount(arr, temp, left, mid);  
        count += mergeSortAndCount(arr, temp, mid + 1, right);   
        count += mergeAndCount(arr, temp, left, mid, right);  
    }  
    return count;  
}  
int main() {  
    int n;  
    scanf("%d", &n);  
    int *arr = (int *)malloc(n * sizeof(int));  
    int *temp = (int *)malloc(n * sizeof(int));  
    for (int i = 0; i < n; i++) {  
        scanf("%d", &arr[i]);  
    }  
    long long count = mergeSortAndCount(arr, temp, 0, n - 1);  
    printf("%lld\n", count);  
    return 0;  
}