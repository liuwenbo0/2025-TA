#include <iostream>
#include <vector>

using namespace std;

int m1 = 0,m2 = 0; 

void insertSort(vector<int> &vec)
{
    int n = vec.size();
    for (int i = 1; i < n; i++)
    {
        int point = vec[i];
        int j = i - 1;
        while (j >= 0 && vec[j] > point)
        {
            vec[j + 1] = vec[j];
            j--;
            m1++;
        }
        vec[j + 1] = point;
        if(j>=0)
        m1++;
    }
}

void merge(vector<int> &nums, int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> leftPart(n1), rightPart(n2);

    for (int i = 0; i < n1; i++)
        leftPart[i] = nums[left + i];
    for (int j = 0; j < n2; j++)
        rightPart[j] = nums[mid + 1 + j];    //复制左右数组

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2)
    {
        m2++;
        if (leftPart[i] <= rightPart[j])
          nums[k++] = leftPart[i++];
        else
          nums[k++] = rightPart[j++];
    }

    while (i < n1)
        nums[k++] = leftPart[i++]; 
    while (j < n2)
        nums[k++] = rightPart[j++]; 
}

void mergeSort(vector<int> &nums, int left, int right)
{
    if (left < right)
    {
        int mid = (right + left)/2;
        mergeSort(nums, left, mid);
        mergeSort(nums, mid + 1, right);
        merge(nums, left, mid, right);
    }
}

int main() 
{
    int n;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; i++)
      cin >> nums[i];
    vector<int> numspe = nums;
    insertSort(numspe);
    numspe = nums;
    mergeSort(numspe, 0, n - 1);
    cout << m2 << " " << m1 << endl;
    return 0;
}