#include<iostream>
#include<vector>
using namespace std;



int InsertionSort(std::vector<int>& nums) {
    int count=0;
    for(auto j=nums.begin()+1;j<nums.end();j++)
    {
      auto end = j-1;
      int tem=*(end+1);
      while(end>=nums.begin())
      {
        count++;
        if(tem<*end)
        {
          *(end+1)=*(end);
          end--;
        }
        else
        {
          break;
        }
      }
      *(end+1)=tem;
    }
   return count;
}

int merge(vector<int>& a, int left, int mid, int right) {
    int count = 0;
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right) {
        count++;  // 每次比较都增加计数
        if (a[i] < a[j]) {
            temp[k++] = a[i++];
        } else {
            temp[k++] = a[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = a[i++];
        count++;
    }
    while (j <= right) {
        temp[k++] = a[j++];
        count++;
    }
    for (i = left, k = 0; i <= right; i++, k++) {
        a[i] = temp[k];
    }
    return count;
}

int Merge_sort(vector<int>& a, int left, int right) {
    if (left >= right) {
        return 0;
    }
    int mid = (left + right) / 2;
    int l_c = Merge_sort(a, left, mid);
    int r_c = Merge_sort(a, mid + 1, right);
    int m_c = merge(a, left, mid, right);
    return l_c + r_c + m_c;
}

int main() {
    int n;
    cin >> n;
    vector<int> a(n),b(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        b[i]=a[i];
    }
    int k = Merge_sort(a, 0, n - 1);
    int p = InsertionSort(b);
    cout << k << endl<<p;
    return 0;
}